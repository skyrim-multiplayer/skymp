name: PR Base
inputs:
  DESCRIPTION:
    description: "Will be used for artifact names"
    required: true
  SKYRIM_SE_FLAG:
    description: "Set to ON if building for Skyrim Special Edition"
    required: false
    default: OFF
  SP_NEXUS_ARTIFACT_NAME:
    description: "May be nope. Artifact name for Skyrim Platform Nexus artifact, %SP_VERSION% will be replaced with the version number"
    required: false
    default: "nope"
  DEPLOY_BRANCH:
    description: "May be empty. Branch here refers to indev/sweetpie"
    required: false
    default: ""
  DIST_ARTIFACT_NAME:
    description: "Artifact name for the dist folder"
    required: true
  SERVER_DIST_ARTIFACT_NAME:
    description: "Artifact name for the server dist folder"
    required: true
  SKYMP5_PATCHES_PAT:
    description: "PAT for skymp5-patches repository"
    required: true
  EMSCRIPTEN:
    description: "Set to true if building for Emscripten"
    required: false
    default: "false"
runs:
  using: composite
  steps:  
    - name: Gather PRs
      if: ${{ inputs.DEPLOY_BRANCH != '' }}
      uses: Pospelove/auto-merge-action@main
      with:
        path: ${{github.workspace}}
        generate-build-metadata: true
        repositories: |
          [
            {
              "owner": "skyrim-multiplayer",
              "repo": "skymp",
              "labels": ["merge-to:${{inputs.DEPLOY_BRANCH}}"]
            },
            {
              "owner": "skyrim-multiplayer",
              "repo": "skymp5-patches",
              "labels": ["merge-to:${{inputs.DEPLOY_BRANCH}}"],
              "token": "${{inputs.SKYMP5_PATCHES_PAT}}"
            }
          ]

    - name: Commit gathered PRs
      if: ${{ inputs.DEPLOY_BRANCH != '' }}
      run: |
        # fake user for bot
        git config --global user.email "skyrim_multiplayer_bot@users.noreply.github.com"
        git config --global user.name "Skyrim Multiplayer Bot"
        git add .
        git commit -m "Merge PRs ${{inputs.DEPLOY_BRANCH}}"
      shell: powershell

    - name: Early build skymp5-client
      run: |
        cd ${{github.workspace}}/skymp5-client
        yarn
        yarn build
      shell: powershell

    - name: Install tools
      if: runner.os == 'Windows'
      run: choco install opencppcoverage
      shell: powershell

    - name: Move vcpkg submodule to a larger drive
      if: runner.os == 'Windows'
      run: |
        Remove-Item -Recurse -Force C:/vcpkg
        Move-Item -Path ./vcpkg C:/vcpkg
      shell: powershell

    - name: Bootstrap vcpkg (Windows)
      if: runner.os == 'Windows'
      run: C:/vcpkg/bootstrap-vcpkg.bat
      shell: powershell

    - name: Bootstrap vcpkg (Non-Windows)
      if: runner.os != 'Windows'
      run: ./vcpkg/bootstrap-vcpkg.sh
      shell: bash

    - name: Debug - free space
      if: runner.os == 'Windows'
      run: Get-PSDrive
      shell: powershell

    - uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    # Download Skyrim SE data files
    - uses: suisei-cn/actions-download-file@v1
      name: Download Skyrim.esm
      with:
        url: "https://gitlab.com/pospelov/se-data/-/raw/main/Skyrim.esm"
        target: ${{github.workspace}}/skyrim_data_files/
    - uses: suisei-cn/actions-download-file@v1
      name: Download Update.esm
      with:
        url: "https://gitlab.com/pospelov/se-data/-/raw/main/Update.esm"
        target: ${{github.workspace}}/skyrim_data_files/
    - uses: suisei-cn/actions-download-file@v1
      name: Download Dawnguard.esm
      with:
        url: "https://gitlab.com/pospelov/se-data/-/raw/main/Dawnguard.esm"
        target: ${{github.workspace}}/skyrim_data_files/
    - uses: suisei-cn/actions-download-file@v1
      name: Download HearthFires.esm
      with:
        url: "https://gitlab.com/pospelov/se-data/-/raw/main/HearthFires.esm"
        target: ${{github.workspace}}/skyrim_data_files/
    - uses: suisei-cn/actions-download-file@v1
      name: Download Dragonborn.esm
      with:
        url: "https://gitlab.com/pospelov/se-data/-/raw/main/Dragonborn.esm"
        target: ${{github.workspace}}/skyrim_data_files/

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # Outputs profiling data in Google Trace Format, which can be parsed by the about:tracing tab of Google Chrome or using a plugin for a tool like Trace Compass.
      run: |
        if ('${{ inputs.EMSCRIPTEN }}' -eq 'true') {
          git clone --depth 1 https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install 3.1.64
          ./emsdk activate 3.1.64
          . .\emsdk_env.ps1
          cd ..
        }

        $cmake_command = if ('${{ inputs.EMSCRIPTEN }}' -eq 'true') { "emcmake cmake" } else { "cmake" }

        $cppcov_path_arg = if ($env:RUNNER_OS -eq 'Windows') { '-DCPPCOV_PATH="C:\Program Files\OpenCppCoverage"' } else { '-DCPPCOV_PATH=OFF' }
        $vcpkg_root_arg = if ($env:RUNNER_OS -eq 'Windows') { '-DVCPKG_ROOT=C:/vcpkg' } else { '-DVCPKG_ROOT="${{github.workspace}}/vcpkg"' }
        $vcpkg_chainload_toolchain_arg = if ('${{ inputs.EMSCRIPTEN }}' -eq 'true') { '-DVCPKG_CHAINLOAD_TOOLCHAIN_FILE="${{github.workspace}}/emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake"' } else { '' }
        $vcpkg_triplet_arg = if ('${{ inputs.EMSCRIPTEN }}' -eq 'true') { '-DVCPKG_TARGET_TRIPLET=wasm32-emscripten' } else { '' }
        $prepare_nexus_archives_arg = if ('${{ inputs.SP_NEXUS_ARTIFACT_NAME}}' -eq 'nope') { '-DPREPARE_NEXUS_ARCHIVES=OFF' } else { '-DPREPARE_NEXUS_ARCHIVES=ON' }

        $cmake_command_full = "$cmake_command "
        $cmake_command_full += "-B ${{github.workspace}}/build "
        $cmake_command_full += "$vcpkg_chainload_toolchain_arg "
        $cmake_command_full += "$vcpkg_triplet_arg "
        $cmake_command_full += "$vcpkg_root_arg "
        $cmake_command_full += "-DUNIT_DATA_DIR=skyrim_data_files "
        $cmake_command_full += "$prepare_nexus_archives_arg "
        $cmake_command_full += "-DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} "
        $cmake_command_full += "-DSKYRIM_SE=${{ inputs.SKYRIM_SE_FLAG }} "
        $cmake_command_full += "$cppcov_path_arg "
        $cmake_command_full += "--profiling-output cmake-profiling-output "
        $cmake_command_full += "--profiling-format google-trace"

        Invoke-Expression $cmake_command_full
      shell: powershell

    - name: Upload vcpkg failure logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: install-x64-windows-sp-dbg-out.log
        #path: C:\vcpkg\buildtrees\spdlog\install-x64-windows-sp-dbg-out.log
        path: C:\vcpkg\buildtrees\mongo-cxx-driver\install-x64-windows-sp-dbg-out.log

    - uses: actions/upload-artifact@v4
      with:
        name: cmake-profiling-output (${{ inputs.DESCRIPTION }})
        path: cmake-profiling-output

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      shell: powershell

    # before running tests, because of dist check test
    - name: Compile metadata into public format
      if: ${{ runner.os == 'Windows' }}
      uses: actions/github-script@v6
      with:
        script: |
          const deployBranch = "${{ inputs.DEPLOY_BRANCH }}";
          const fs = require('fs');
          const crypto = require('crypto');

          const res = {};

          res.commitSha = process.env.GITHUB_SHA;

          if (deployBranch !== '') {
            const file = fs.readFileSync('./build-metadata.json');
            const data = JSON.parse(file);

            res.refs_info = data.refs_info.map((refInfo) => {
              if (refInfo.repoName !== "skymp5-patches") {
                return refInfo;
              }
              else {
                return { refInfoHash: crypto.createHash('sha256').update(refInfo.ref).digest('hex') };
              }
            });
          }

          console.log("Resulting data:");
          console.log(res);

          const outFilePath = './build/dist/client/Data/Platform/Distribution/build-metadata-public.json';
          fs.writeFileSync(outFilePath, JSON.stringify(res, null, 2));

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --verbose # --output-on-failure
      shell: powershell

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.DIST_ARTIFACT_NAME }}
        path: ${{github.workspace}}/build/dist

    - uses: actions/upload-artifact@v4
      with:
        name: skymp5-client-js (${{ inputs.DESCRIPTION }})
        path: ${{github.workspace}}/build/dist/client/Data/Platform/Plugins/skymp5-client.js

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.SERVER_DIST_ARTIFACT_NAME }}
        path: ${{github.workspace}}/build/dist/server

    - uses: actions/upload-artifact@v4
      with:
        name: coverage (${{ inputs.DESCRIPTION }})
        path: ${{github.workspace}}/build/__coverage

    - name: Extract SP Version Number
      if: ${{ inputs.SP_NEXUS_ARTIFACT_NAME != 'nope' }}
      run: |
        $version = (Get-Content ./skyrim-platform/package.json | ConvertFrom-Json).version
        echo "VERSION=$version" | Out-File -Append -FilePath $env:GITHUB_ENV
      shell: powershell

    - name: Replace %SP_VERSION% with actual version in artifact name
      if: ${{ inputs.SP_NEXUS_ARTIFACT_NAME != 'nope' }}
      run: |
        $artifactName = "${{ inputs.SP_NEXUS_ARTIFACT_NAME }}"
        $artifactName = $artifactName.Replace("%SP_VERSION%", "${{ env.VERSION }}")
        echo "SP_NEXUS_ARTIFACT_NAME=$artifactName" | Out-File -Append -FilePath $env:GITHUB_ENV
      shell: powershell
      
    - uses: actions/upload-artifact@v4
      if: ${{ inputs.SP_NEXUS_ARTIFACT_NAME != 'nope' }}
      with:
        name: ${{ env.SP_NEXUS_ARTIFACT_NAME }}
        # Data folder is skipped for mod managers
        path: ${{github.workspace}}/build/nexus/sp/data/*

    - uses: actions/upload-artifact@v4
      with:
        name: papyrus-vm-nexus (${{ inputs.DESCRIPTION }})
        # Data folder is skipped for mod managers
        path: ${{github.workspace}}/build/nexus/papyrus-vm/*

    - name: Debug - free space
      if: runner.os == 'Windows'
      run: Get-PSDrive
      shell: powershell

    - uses: actions/upload-artifact@v4
      with:
        name: msbuild_files (${{ inputs.DESCRIPTION }})
        path: |
          ${{github.workspace}}/build/**/*.sln
          ${{github.workspace}}/build/**/*.vcxproj
