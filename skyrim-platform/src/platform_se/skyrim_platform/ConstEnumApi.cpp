// This file is generated by skyrim-platform/tools/const_enum_extractor

#include "ConstEnumApi.h"

auto _n_ = [](auto env, const auto& v) { return Napi::Number::New(env, v); };
auto _s_ = [](auto env, const auto& v) { return Napi::String::New(env, v); };
auto _u_ = [](auto i) { return static_cast<uint32_t>(i); };

void ConstEnumApi::Register(Napi::Env env, Napi::Object& exports)
{
  auto SpellType = Napi::Object::New(env);
  SpellType.Set(_u_(0), "Left");
  SpellType.Set(_u_(1), "Right");
  SpellType.Set(_u_(2), "Voise");
  SpellType.Set(_u_(3), "Instant");
  SpellType.Set("Left", _n_(env, 0));
  SpellType.Set("Right", _n_(env, 1));
  SpellType.Set("Voise", _n_(env, 2));
  SpellType.Set("Instant", _n_(env, 3));
  exports.Set("SpellType", SpellType);

  auto MarkerType = Napi::Object::New(env);
  MarkerType.Set(_u_(0), "None");
  MarkerType.Set(_u_(1), "City");
  MarkerType.Set(_u_(2), "Town");
  MarkerType.Set(_u_(3), "Settlement");
  MarkerType.Set(_u_(4), "Cave");
  MarkerType.Set(_u_(5), "Camp");
  MarkerType.Set(_u_(6), "Fort");
  MarkerType.Set(_u_(7), "NordicRuins");
  MarkerType.Set(_u_(8), "DwemerRuin");
  MarkerType.Set(_u_(9), "Shipwreck");
  MarkerType.Set(_u_(10), "Grove");
  MarkerType.Set(_u_(11), "Landmark");
  MarkerType.Set(_u_(12), "DragonLair");
  MarkerType.Set(_u_(13), "Farm");
  MarkerType.Set(_u_(14), "WoodMill");
  MarkerType.Set(_u_(15), "Mine");
  MarkerType.Set(_u_(16), "ImperialCamp");
  MarkerType.Set(_u_(17), "StormcloakCamp");
  MarkerType.Set(_u_(18), "Doomstone");
  MarkerType.Set(_u_(19), "WheatMill");
  MarkerType.Set(_u_(20), "Smelter");
  MarkerType.Set(_u_(21), "Stable");
  MarkerType.Set(_u_(22), "ImperialTower");
  MarkerType.Set(_u_(23), "Clearing");
  MarkerType.Set(_u_(24), "Pass");
  MarkerType.Set(_u_(25), "Alter");
  MarkerType.Set(_u_(26), "Rock");
  MarkerType.Set(_u_(27), "Lighthouse");
  MarkerType.Set(_u_(28), "OrcStronghold");
  MarkerType.Set(_u_(29), "GiantCamp");
  MarkerType.Set(_u_(30), "Shack");
  MarkerType.Set(_u_(31), "NordicTower");
  MarkerType.Set(_u_(32), "NordicDwelling");
  MarkerType.Set(_u_(33), "Docks");
  MarkerType.Set(_u_(34), "Shrine");
  MarkerType.Set(_u_(35), "RiftenCastle");
  MarkerType.Set(_u_(36), "RiftenCapitol");
  MarkerType.Set(_u_(37), "WindhelmCastle");
  MarkerType.Set(_u_(38), "WindhelmCapitol");
  MarkerType.Set(_u_(39), "WhiterunCastle");
  MarkerType.Set(_u_(40), "WhiterunCapitol");
  MarkerType.Set(_u_(41), "SolitudeCastle");
  MarkerType.Set(_u_(42), "SolitudeCapitol");
  MarkerType.Set(_u_(43), "MarkarthCastle");
  MarkerType.Set(_u_(44), "MarkarthCapitol");
  MarkerType.Set(_u_(45), "WinterholdCastle");
  MarkerType.Set(_u_(46), "WinterholdCapitol");
  MarkerType.Set(_u_(47), "MorthalCastle");
  MarkerType.Set(_u_(48), "MorthalCapitol");
  MarkerType.Set(_u_(49), "FalkreathCastle");
  MarkerType.Set(_u_(50), "FalkreathCapitol");
  MarkerType.Set(_u_(51), "DawnstarCastle");
  MarkerType.Set(_u_(52), "DawnstarCapitol");
  MarkerType.Set(_u_(53), "DLC02_TempleOfMiraak");
  MarkerType.Set(_u_(54), "DLC02_RavenRock");
  MarkerType.Set(_u_(55), "DLC02_BeastStone");
  MarkerType.Set(_u_(56), "DLC02_TelMithryn");
  MarkerType.Set(_u_(57), "DLC02_ToSkyrim");
  MarkerType.Set(_u_(58), "DLC02_ToSolstheim");
  MarkerType.Set("None", _n_(env, 0));
  MarkerType.Set("City", _n_(env, 1));
  MarkerType.Set("Town", _n_(env, 2));
  MarkerType.Set("Settlement", _n_(env, 3));
  MarkerType.Set("Cave", _n_(env, 4));
  MarkerType.Set("Camp", _n_(env, 5));
  MarkerType.Set("Fort", _n_(env, 6));
  MarkerType.Set("NordicRuins", _n_(env, 7));
  MarkerType.Set("DwemerRuin", _n_(env, 8));
  MarkerType.Set("Shipwreck", _n_(env, 9));
  MarkerType.Set("Grove", _n_(env, 10));
  MarkerType.Set("Landmark", _n_(env, 11));
  MarkerType.Set("DragonLair", _n_(env, 12));
  MarkerType.Set("Farm", _n_(env, 13));
  MarkerType.Set("WoodMill", _n_(env, 14));
  MarkerType.Set("Mine", _n_(env, 15));
  MarkerType.Set("ImperialCamp", _n_(env, 16));
  MarkerType.Set("StormcloakCamp", _n_(env, 17));
  MarkerType.Set("Doomstone", _n_(env, 18));
  MarkerType.Set("WheatMill", _n_(env, 19));
  MarkerType.Set("Smelter", _n_(env, 20));
  MarkerType.Set("Stable", _n_(env, 21));
  MarkerType.Set("ImperialTower", _n_(env, 22));
  MarkerType.Set("Clearing", _n_(env, 23));
  MarkerType.Set("Pass", _n_(env, 24));
  MarkerType.Set("Alter", _n_(env, 25));
  MarkerType.Set("Rock", _n_(env, 26));
  MarkerType.Set("Lighthouse", _n_(env, 27));
  MarkerType.Set("OrcStronghold", _n_(env, 28));
  MarkerType.Set("GiantCamp", _n_(env, 29));
  MarkerType.Set("Shack", _n_(env, 30));
  MarkerType.Set("NordicTower", _n_(env, 31));
  MarkerType.Set("NordicDwelling", _n_(env, 32));
  MarkerType.Set("Docks", _n_(env, 33));
  MarkerType.Set("Shrine", _n_(env, 34));
  MarkerType.Set("RiftenCastle", _n_(env, 35));
  MarkerType.Set("RiftenCapitol", _n_(env, 36));
  MarkerType.Set("WindhelmCastle", _n_(env, 37));
  MarkerType.Set("WindhelmCapitol", _n_(env, 38));
  MarkerType.Set("WhiterunCastle", _n_(env, 39));
  MarkerType.Set("WhiterunCapitol", _n_(env, 40));
  MarkerType.Set("SolitudeCastle", _n_(env, 41));
  MarkerType.Set("SolitudeCapitol", _n_(env, 42));
  MarkerType.Set("MarkarthCastle", _n_(env, 43));
  MarkerType.Set("MarkarthCapitol", _n_(env, 44));
  MarkerType.Set("WinterholdCastle", _n_(env, 45));
  MarkerType.Set("WinterholdCapitol", _n_(env, 46));
  MarkerType.Set("MorthalCastle", _n_(env, 47));
  MarkerType.Set("MorthalCapitol", _n_(env, 48));
  MarkerType.Set("FalkreathCastle", _n_(env, 49));
  MarkerType.Set("FalkreathCapitol", _n_(env, 50));
  MarkerType.Set("DawnstarCastle", _n_(env, 51));
  MarkerType.Set("DawnstarCapitol", _n_(env, 52));
  MarkerType.Set("DLC02_TempleOfMiraak", _n_(env, 53));
  MarkerType.Set("DLC02_RavenRock", _n_(env, 54));
  MarkerType.Set("DLC02_BeastStone", _n_(env, 55));
  MarkerType.Set("DLC02_TelMithryn", _n_(env, 56));
  MarkerType.Set("DLC02_ToSkyrim", _n_(env, 57));
  MarkerType.Set("DLC02_ToSolstheim", _n_(env, 58));
  exports.Set("MarkerType", MarkerType);

  auto ActorValue = Napi::Object::New(env);
  ActorValue.Set(_u_(0), "Aggresion");
  ActorValue.Set(_u_(1), "Confidence");
  ActorValue.Set(_u_(2), "Energy");
  ActorValue.Set(_u_(3), "Morality");
  ActorValue.Set(_u_(4), "Mood");
  ActorValue.Set(_u_(5), "Assistance");
  ActorValue.Set(_u_(6), "OneHanded");
  ActorValue.Set(_u_(7), "TwoHanded");
  ActorValue.Set(_u_(8), "Archery");
  ActorValue.Set(_u_(9), "Block");
  ActorValue.Set(_u_(10), "Smithing");
  ActorValue.Set(_u_(11), "HeavyArmor");
  ActorValue.Set(_u_(12), "LightArmor");
  ActorValue.Set(_u_(13), "Pickpocket");
  ActorValue.Set(_u_(14), "Lockpicking");
  ActorValue.Set(_u_(15), "Sneak");
  ActorValue.Set(_u_(16), "Alchemy");
  ActorValue.Set(_u_(17), "Speech");
  ActorValue.Set(_u_(18), "Alteration");
  ActorValue.Set(_u_(19), "Conjuration");
  ActorValue.Set(_u_(20), "Destruction");
  ActorValue.Set(_u_(21), "Illusion");
  ActorValue.Set(_u_(22), "Restoration");
  ActorValue.Set(_u_(23), "Enchanting");
  ActorValue.Set(_u_(24), "Health");
  ActorValue.Set(_u_(25), "Magicka");
  ActorValue.Set(_u_(26), "Stamina");
  ActorValue.Set(_u_(27), "HealRate");
  ActorValue.Set(_u_(28), "MagickaRate");
  ActorValue.Set(_u_(29), "StaminaRate");
  ActorValue.Set(_u_(30), "SpeedMult");
  ActorValue.Set(_u_(31), "InventoryWeight");
  ActorValue.Set(_u_(32), "CarryWeight");
  ActorValue.Set(_u_(33), "CriticalChance");
  ActorValue.Set(_u_(34), "MeleeDamage");
  ActorValue.Set(_u_(35), "UnarmedDamage");
  ActorValue.Set(_u_(36), "Mass");
  ActorValue.Set(_u_(37), "VoicePoints");
  ActorValue.Set(_u_(38), "VoiceRate");
  ActorValue.Set(_u_(39), "DamageResist");
  ActorValue.Set(_u_(40), "PoisonResist");
  ActorValue.Set(_u_(41), "ResistFire");
  ActorValue.Set(_u_(42), "ResistShock");
  ActorValue.Set(_u_(43), "ResistFrost");
  ActorValue.Set(_u_(44), "ResistMagic");
  ActorValue.Set(_u_(45), "ResistDisease");
  ActorValue.Set(_u_(46), "Unknown46");
  ActorValue.Set(_u_(47), "Unknown47");
  ActorValue.Set(_u_(48), "Unknown48");
  ActorValue.Set(_u_(49), "Unknown49");
  ActorValue.Set(_u_(50), "Unknown50");
  ActorValue.Set(_u_(51), "Unknown51");
  ActorValue.Set(_u_(52), "Unknown52");
  ActorValue.Set(_u_(53), "Paralysis");
  ActorValue.Set(_u_(54), "Invisibility");
  ActorValue.Set(_u_(55), "NightEye");
  ActorValue.Set(_u_(56), "DetectLifeRange");
  ActorValue.Set(_u_(57), "WaterBreathing");
  ActorValue.Set(_u_(58), "WaterWalking");
  ActorValue.Set(_u_(59), "Unknown59");
  ActorValue.Set(_u_(60), "Fame");
  ActorValue.Set(_u_(61), "Infamy");
  ActorValue.Set(_u_(62), "JumpingBonus");
  ActorValue.Set(_u_(63), "WardPower");
  ActorValue.Set(_u_(64), "RightItemCharge");
  ActorValue.Set(_u_(65), "ArmorPerks");
  ActorValue.Set(_u_(66), "ShieldPerks");
  ActorValue.Set(_u_(67), "WardDeflection");
  ActorValue.Set(_u_(68), "Variable01");
  ActorValue.Set(_u_(69), "Variable02");
  ActorValue.Set(_u_(70), "Variable03");
  ActorValue.Set(_u_(71), "Variable04");
  ActorValue.Set(_u_(72), "Variable05");
  ActorValue.Set(_u_(73), "Variable06");
  ActorValue.Set(_u_(74), "Variable07");
  ActorValue.Set(_u_(75), "Variable08");
  ActorValue.Set(_u_(76), "Variable09");
  ActorValue.Set(_u_(77), "Variable10");
  ActorValue.Set(_u_(78), "BowSpeedBonus");
  ActorValue.Set(_u_(79), "FavorActive");
  ActorValue.Set(_u_(80), "FavorsPerDay");
  ActorValue.Set(_u_(81), "FavorsPerDayTimer");
  ActorValue.Set(_u_(82), "LeftItemCharge");
  ActorValue.Set(_u_(83), "AbsorbChance");
  ActorValue.Set(_u_(84), "Blindness");
  ActorValue.Set(_u_(85), "WeaponSpeedMult");
  ActorValue.Set(_u_(86), "ShoutRecoveryMult");
  ActorValue.Set(_u_(87), "BowStaggerBonus");
  ActorValue.Set(_u_(88), "Telekinesis");
  ActorValue.Set(_u_(89), "FavorPointsBonus");
  ActorValue.Set(_u_(90), "LastBribedIntimidated");
  ActorValue.Set(_u_(91), "LastFlattered");
  ActorValue.Set(_u_(92), "MovementNoiseMult");
  ActorValue.Set(_u_(93), "BypassVendorStolenCheck");
  ActorValue.Set(_u_(94), "BypassVendorKeywordCheck");
  ActorValue.Set(_u_(95), "WaitingForPlayer");
  ActorValue.Set(_u_(96), "OneHandedModifier");
  ActorValue.Set(_u_(97), "TwoHandedModifier");
  ActorValue.Set(_u_(98), "MarksmanModifier");
  ActorValue.Set(_u_(99), "BlockModifier");
  ActorValue.Set(_u_(100), "SmithingModifier");
  ActorValue.Set(_u_(101), "HeavyArmorModifier");
  ActorValue.Set(_u_(102), "LightArmorModifier");
  ActorValue.Set(_u_(103), "PickpocketModifier");
  ActorValue.Set(_u_(104), "LockpickingModifier");
  ActorValue.Set(_u_(105), "SneakingModifier");
  ActorValue.Set(_u_(106), "AlchemyModifier");
  ActorValue.Set(_u_(107), "SpeechcraftModifier");
  ActorValue.Set(_u_(108), "AlterationModifier");
  ActorValue.Set(_u_(109), "ConjurationModifier");
  ActorValue.Set(_u_(110), "DestructionModifier");
  ActorValue.Set(_u_(111), "IllusionModifier");
  ActorValue.Set(_u_(112), "RestorationModifier");
  ActorValue.Set(_u_(113), "EnchantingModifier");
  ActorValue.Set(_u_(114), "OneHandedSkillAdvance");
  ActorValue.Set(_u_(115), "TwoHandedSkillAdvance");
  ActorValue.Set(_u_(116), "MarksmanSkillAdvance");
  ActorValue.Set(_u_(117), "BlockSkillAdvance");
  ActorValue.Set(_u_(118), "SmithingSkillAdvance");
  ActorValue.Set(_u_(119), "HeavyArmorSkillAdvance");
  ActorValue.Set(_u_(120), "LightArmorSkillAdvance");
  ActorValue.Set(_u_(121), "PickpocketSkillAdvance");
  ActorValue.Set(_u_(122), "LockpickingSkillAdvance");
  ActorValue.Set(_u_(123), "SneakingSkillAdvance");
  ActorValue.Set(_u_(124), "AlchemySkillAdvance");
  ActorValue.Set(_u_(125), "SpeechcraftSkillAdvance");
  ActorValue.Set(_u_(126), "AlterationSkillAdvance");
  ActorValue.Set(_u_(127), "ConjurationSkillAdvance");
  ActorValue.Set(_u_(128), "DestructionSkillAdvance");
  ActorValue.Set(_u_(129), "IllusionSkillAdvance");
  ActorValue.Set(_u_(130), "RestorationSkillAdvance");
  ActorValue.Set(_u_(131), "EnchantingSkillAdvance");
  ActorValue.Set(_u_(132), "LeftWeaponSpeedMultiply");
  ActorValue.Set(_u_(133), "DragonSouls");
  ActorValue.Set(_u_(134), "CombatHealthRegenMultiply");
  ActorValue.Set(_u_(135), "OneHandedPowerModifier");
  ActorValue.Set(_u_(136), "TwoHandedPowerModifier");
  ActorValue.Set(_u_(137), "MarksmanPowerModifier");
  ActorValue.Set(_u_(138), "BlockPowerModifier");
  ActorValue.Set(_u_(139), "SmithingPowerModifier");
  ActorValue.Set(_u_(140), "HeavyArmorPowerModifier");
  ActorValue.Set(_u_(141), "LightArmorPowerModifier");
  ActorValue.Set(_u_(142), "PickpocketPowerModifier");
  ActorValue.Set(_u_(143), "LockpickingPowerModifier");
  ActorValue.Set(_u_(144), "SneakingPowerModifier");
  ActorValue.Set(_u_(145), "AlchemyPowerModifier");
  ActorValue.Set(_u_(146), "SpeechcraftPowerModifier");
  ActorValue.Set(_u_(147), "AlterationPowerModifier");
  ActorValue.Set(_u_(148), "ConjurationPowerModifier");
  ActorValue.Set(_u_(149), "DestructionPowerModifier");
  ActorValue.Set(_u_(150), "IllusionPowerModifier");
  ActorValue.Set(_u_(151), "RestorationPowerModifier");
  ActorValue.Set(_u_(152), "EnchantingPowerModifier");
  ActorValue.Set(_u_(153), "DragonRend");
  ActorValue.Set(_u_(154), "AttackDamageMult");
  ActorValue.Set(_u_(155), "HealRateMult");
  ActorValue.Set(_u_(156), "MagickaRateMult");
  ActorValue.Set(_u_(157), "StaminaRateMult");
  ActorValue.Set(_u_(158), "WerewolfPerks");
  ActorValue.Set(_u_(159), "VampirePerks");
  ActorValue.Set(_u_(160), "GrabActorOffset");
  ActorValue.Set(_u_(161), "Grabbed");
  ActorValue.Set(_u_(162), "Unknown162");
  ActorValue.Set(_u_(163), "ReflectDamage");
  ActorValue.Set("Aggresion", _n_(env, 0));
  ActorValue.Set("Confidence", _n_(env, 1));
  ActorValue.Set("Energy", _n_(env, 2));
  ActorValue.Set("Morality", _n_(env, 3));
  ActorValue.Set("Mood", _n_(env, 4));
  ActorValue.Set("Assistance", _n_(env, 5));
  ActorValue.Set("OneHanded", _n_(env, 6));
  ActorValue.Set("TwoHanded", _n_(env, 7));
  ActorValue.Set("Archery", _n_(env, 8));
  ActorValue.Set("Block", _n_(env, 9));
  ActorValue.Set("Smithing", _n_(env, 10));
  ActorValue.Set("HeavyArmor", _n_(env, 11));
  ActorValue.Set("LightArmor", _n_(env, 12));
  ActorValue.Set("Pickpocket", _n_(env, 13));
  ActorValue.Set("Lockpicking", _n_(env, 14));
  ActorValue.Set("Sneak", _n_(env, 15));
  ActorValue.Set("Alchemy", _n_(env, 16));
  ActorValue.Set("Speech", _n_(env, 17));
  ActorValue.Set("Alteration", _n_(env, 18));
  ActorValue.Set("Conjuration", _n_(env, 19));
  ActorValue.Set("Destruction", _n_(env, 20));
  ActorValue.Set("Illusion", _n_(env, 21));
  ActorValue.Set("Restoration", _n_(env, 22));
  ActorValue.Set("Enchanting", _n_(env, 23));
  ActorValue.Set("Health", _n_(env, 24));
  ActorValue.Set("Magicka", _n_(env, 25));
  ActorValue.Set("Stamina", _n_(env, 26));
  ActorValue.Set("HealRate", _n_(env, 27));
  ActorValue.Set("MagickaRate", _n_(env, 28));
  ActorValue.Set("StaminaRate", _n_(env, 29));
  ActorValue.Set("SpeedMult", _n_(env, 30));
  ActorValue.Set("InventoryWeight", _n_(env, 31));
  ActorValue.Set("CarryWeight", _n_(env, 32));
  ActorValue.Set("CriticalChance", _n_(env, 33));
  ActorValue.Set("MeleeDamage", _n_(env, 34));
  ActorValue.Set("UnarmedDamage", _n_(env, 35));
  ActorValue.Set("Mass", _n_(env, 36));
  ActorValue.Set("VoicePoints", _n_(env, 37));
  ActorValue.Set("VoiceRate", _n_(env, 38));
  ActorValue.Set("DamageResist", _n_(env, 39));
  ActorValue.Set("PoisonResist", _n_(env, 40));
  ActorValue.Set("ResistFire", _n_(env, 41));
  ActorValue.Set("ResistShock", _n_(env, 42));
  ActorValue.Set("ResistFrost", _n_(env, 43));
  ActorValue.Set("ResistMagic", _n_(env, 44));
  ActorValue.Set("ResistDisease", _n_(env, 45));
  ActorValue.Set("Unknown46", _n_(env, 46));
  ActorValue.Set("Unknown47", _n_(env, 47));
  ActorValue.Set("Unknown48", _n_(env, 48));
  ActorValue.Set("Unknown49", _n_(env, 49));
  ActorValue.Set("Unknown50", _n_(env, 50));
  ActorValue.Set("Unknown51", _n_(env, 51));
  ActorValue.Set("Unknown52", _n_(env, 52));
  ActorValue.Set("Paralysis", _n_(env, 53));
  ActorValue.Set("Invisibility", _n_(env, 54));
  ActorValue.Set("NightEye", _n_(env, 55));
  ActorValue.Set("DetectLifeRange", _n_(env, 56));
  ActorValue.Set("WaterBreathing", _n_(env, 57));
  ActorValue.Set("WaterWalking", _n_(env, 58));
  ActorValue.Set("Unknown59", _n_(env, 59));
  ActorValue.Set("Fame", _n_(env, 60));
  ActorValue.Set("Infamy", _n_(env, 61));
  ActorValue.Set("JumpingBonus", _n_(env, 62));
  ActorValue.Set("WardPower", _n_(env, 63));
  ActorValue.Set("RightItemCharge", _n_(env, 64));
  ActorValue.Set("ArmorPerks", _n_(env, 65));
  ActorValue.Set("ShieldPerks", _n_(env, 66));
  ActorValue.Set("WardDeflection", _n_(env, 67));
  ActorValue.Set("Variable01", _n_(env, 68));
  ActorValue.Set("Variable02", _n_(env, 69));
  ActorValue.Set("Variable03", _n_(env, 70));
  ActorValue.Set("Variable04", _n_(env, 71));
  ActorValue.Set("Variable05", _n_(env, 72));
  ActorValue.Set("Variable06", _n_(env, 73));
  ActorValue.Set("Variable07", _n_(env, 74));
  ActorValue.Set("Variable08", _n_(env, 75));
  ActorValue.Set("Variable09", _n_(env, 76));
  ActorValue.Set("Variable10", _n_(env, 77));
  ActorValue.Set("BowSpeedBonus", _n_(env, 78));
  ActorValue.Set("FavorActive", _n_(env, 79));
  ActorValue.Set("FavorsPerDay", _n_(env, 80));
  ActorValue.Set("FavorsPerDayTimer", _n_(env, 81));
  ActorValue.Set("LeftItemCharge", _n_(env, 82));
  ActorValue.Set("AbsorbChance", _n_(env, 83));
  ActorValue.Set("Blindness", _n_(env, 84));
  ActorValue.Set("WeaponSpeedMult", _n_(env, 85));
  ActorValue.Set("ShoutRecoveryMult", _n_(env, 86));
  ActorValue.Set("BowStaggerBonus", _n_(env, 87));
  ActorValue.Set("Telekinesis", _n_(env, 88));
  ActorValue.Set("FavorPointsBonus", _n_(env, 89));
  ActorValue.Set("LastBribedIntimidated", _n_(env, 90));
  ActorValue.Set("LastFlattered", _n_(env, 91));
  ActorValue.Set("MovementNoiseMult", _n_(env, 92));
  ActorValue.Set("BypassVendorStolenCheck", _n_(env, 93));
  ActorValue.Set("BypassVendorKeywordCheck", _n_(env, 94));
  ActorValue.Set("WaitingForPlayer", _n_(env, 95));
  ActorValue.Set("OneHandedModifier", _n_(env, 96));
  ActorValue.Set("TwoHandedModifier", _n_(env, 97));
  ActorValue.Set("MarksmanModifier", _n_(env, 98));
  ActorValue.Set("BlockModifier", _n_(env, 99));
  ActorValue.Set("SmithingModifier", _n_(env, 100));
  ActorValue.Set("HeavyArmorModifier", _n_(env, 101));
  ActorValue.Set("LightArmorModifier", _n_(env, 102));
  ActorValue.Set("PickpocketModifier", _n_(env, 103));
  ActorValue.Set("LockpickingModifier", _n_(env, 104));
  ActorValue.Set("SneakingModifier", _n_(env, 105));
  ActorValue.Set("AlchemyModifier", _n_(env, 106));
  ActorValue.Set("SpeechcraftModifier", _n_(env, 107));
  ActorValue.Set("AlterationModifier", _n_(env, 108));
  ActorValue.Set("ConjurationModifier", _n_(env, 109));
  ActorValue.Set("DestructionModifier", _n_(env, 110));
  ActorValue.Set("IllusionModifier", _n_(env, 111));
  ActorValue.Set("RestorationModifier", _n_(env, 112));
  ActorValue.Set("EnchantingModifier", _n_(env, 113));
  ActorValue.Set("OneHandedSkillAdvance", _n_(env, 114));
  ActorValue.Set("TwoHandedSkillAdvance", _n_(env, 115));
  ActorValue.Set("MarksmanSkillAdvance", _n_(env, 116));
  ActorValue.Set("BlockSkillAdvance", _n_(env, 117));
  ActorValue.Set("SmithingSkillAdvance", _n_(env, 118));
  ActorValue.Set("HeavyArmorSkillAdvance", _n_(env, 119));
  ActorValue.Set("LightArmorSkillAdvance", _n_(env, 120));
  ActorValue.Set("PickpocketSkillAdvance", _n_(env, 121));
  ActorValue.Set("LockpickingSkillAdvance", _n_(env, 122));
  ActorValue.Set("SneakingSkillAdvance", _n_(env, 123));
  ActorValue.Set("AlchemySkillAdvance", _n_(env, 124));
  ActorValue.Set("SpeechcraftSkillAdvance", _n_(env, 125));
  ActorValue.Set("AlterationSkillAdvance", _n_(env, 126));
  ActorValue.Set("ConjurationSkillAdvance", _n_(env, 127));
  ActorValue.Set("DestructionSkillAdvance", _n_(env, 128));
  ActorValue.Set("IllusionSkillAdvance", _n_(env, 129));
  ActorValue.Set("RestorationSkillAdvance", _n_(env, 130));
  ActorValue.Set("EnchantingSkillAdvance", _n_(env, 131));
  ActorValue.Set("LeftWeaponSpeedMultiply", _n_(env, 132));
  ActorValue.Set("DragonSouls", _n_(env, 133));
  ActorValue.Set("CombatHealthRegenMultiply", _n_(env, 134));
  ActorValue.Set("OneHandedPowerModifier", _n_(env, 135));
  ActorValue.Set("TwoHandedPowerModifier", _n_(env, 136));
  ActorValue.Set("MarksmanPowerModifier", _n_(env, 137));
  ActorValue.Set("BlockPowerModifier", _n_(env, 138));
  ActorValue.Set("SmithingPowerModifier", _n_(env, 139));
  ActorValue.Set("HeavyArmorPowerModifier", _n_(env, 140));
  ActorValue.Set("LightArmorPowerModifier", _n_(env, 141));
  ActorValue.Set("PickpocketPowerModifier", _n_(env, 142));
  ActorValue.Set("LockpickingPowerModifier", _n_(env, 143));
  ActorValue.Set("SneakingPowerModifier", _n_(env, 144));
  ActorValue.Set("AlchemyPowerModifier", _n_(env, 145));
  ActorValue.Set("SpeechcraftPowerModifier", _n_(env, 146));
  ActorValue.Set("AlterationPowerModifier", _n_(env, 147));
  ActorValue.Set("ConjurationPowerModifier", _n_(env, 148));
  ActorValue.Set("DestructionPowerModifier", _n_(env, 149));
  ActorValue.Set("IllusionPowerModifier", _n_(env, 150));
  ActorValue.Set("RestorationPowerModifier", _n_(env, 151));
  ActorValue.Set("EnchantingPowerModifier", _n_(env, 152));
  ActorValue.Set("DragonRend", _n_(env, 153));
  ActorValue.Set("AttackDamageMult", _n_(env, 154));
  ActorValue.Set("HealRateMult", _n_(env, 155));
  ActorValue.Set("MagickaRateMult", _n_(env, 156));
  ActorValue.Set("StaminaRateMult", _n_(env, 157));
  ActorValue.Set("WerewolfPerks", _n_(env, 158));
  ActorValue.Set("VampirePerks", _n_(env, 159));
  ActorValue.Set("GrabActorOffset", _n_(env, 160));
  ActorValue.Set("Grabbed", _n_(env, 161));
  ActorValue.Set("Unknown162", _n_(env, 162));
  ActorValue.Set("ReflectDamage", _n_(env, 163));
  exports.Set("ActorValue", ActorValue);

  auto SlotType = Napi::Object::New(env);
  SlotType.Set(_u_(1), "Left");
  SlotType.Set(_u_(2), "Right");
  SlotType.Set(_u_(3), "Voice");
  SlotType.Set("Left", _n_(env, 1));
  SlotType.Set("Right", _n_(env, 2));
  SlotType.Set("Voice", _n_(env, 3));
  exports.Set("SlotType", SlotType);

  auto WardHitStatus = Napi::Object::New(env);
  WardHitStatus.Set(_u_(0), "Friendly");
  WardHitStatus.Set(_u_(1), "Absorbed");
  WardHitStatus.Set(_u_(2), "Broken");
  WardHitStatus.Set("Friendly", _n_(env, 0));
  WardHitStatus.Set("Absorbed", _n_(env, 1));
  WardHitStatus.Set("Broken", _n_(env, 2));
  exports.Set("WardHitStatus", WardHitStatus);

  auto PlayerPositionEventType = Napi::Object::New(env);
  PlayerPositionEventType.Set(_u_(0), "PreCellTransition");
  PlayerPositionEventType.Set(_u_(1), "PreUpdatePackages");
  PlayerPositionEventType.Set(_u_(2), "PostUpdatePackages");
  PlayerPositionEventType.Set(_u_(3), "PostCellTransition");
  PlayerPositionEventType.Set(_u_(4), "CellTransitionFinish");
  PlayerPositionEventType.Set("PreCellTransition", _n_(env, 0));
  PlayerPositionEventType.Set("PreUpdatePackages", _n_(env, 1));
  PlayerPositionEventType.Set("PostUpdatePackages", _n_(env, 2));
  PlayerPositionEventType.Set("PostCellTransition", _n_(env, 3));
  PlayerPositionEventType.Set("CellTransitionFinish", _n_(env, 4));
  exports.Set("PlayerPositionEventType", PlayerPositionEventType);

  auto InputDeviceType = Napi::Object::New(env);
  InputDeviceType.Set(_u_(0), "Keyboard");
  InputDeviceType.Set(_u_(1), "Mouse");
  InputDeviceType.Set(_u_(2), "Gamepad");
  InputDeviceType.Set(_u_(3), "VirtualKeyboard");
  InputDeviceType.Set("Keyboard", _n_(env, 0));
  InputDeviceType.Set("Mouse", _n_(env, 1));
  InputDeviceType.Set("Gamepad", _n_(env, 2));
  InputDeviceType.Set("VirtualKeyboard", _n_(env, 3));
  exports.Set("InputDeviceType", InputDeviceType);

  auto MotionType = Napi::Object::New(env);
  MotionType.Set(_u_(1), "Dynamic");
  MotionType.Set(_u_(2), "SphereInertia");
  MotionType.Set(_u_(3), "BoxInertia");
  MotionType.Set(_u_(4), "Keyframed");
  MotionType.Set(_u_(5), "Fixed");
  MotionType.Set(_u_(6), "ThinBoxInertia");
  MotionType.Set(_u_(7), "Character");
  MotionType.Set("Dynamic", _n_(env, 1));
  MotionType.Set("SphereInertia", _n_(env, 2));
  MotionType.Set("BoxInertia", _n_(env, 3));
  MotionType.Set("Keyframed", _n_(env, 4));
  MotionType.Set("Fixed", _n_(env, 5));
  MotionType.Set("ThinBoxInertia", _n_(env, 6));
  MotionType.Set("Character", _n_(env, 7));
  exports.Set("MotionType", MotionType);

  auto Menu = Napi::Object::New(env);
  Menu.Set("BarterMenu", "Barter");
  Menu.Set("Book Menu", "Book");
  Menu.Set("Console", "Console");
  Menu.Set("Console Native UI Menu", "ConsoleNativeUI");
  Menu.Set("ContainerMenu", "Container");
  Menu.Set("Crafting Menu", "Crafting");
  Menu.Set("Credits Menu", "Credits");
  Menu.Set("Cursor Menu", "Cursor");
  Menu.Set("Debug Text Menu", "Debug");
  Menu.Set("Dialogue Menu", "Dialogue");
  Menu.Set("Fader Menu", "Fader");
  Menu.Set("FavoritesMenu", "Favorites");
  Menu.Set("GiftMenu", "Gift");
  Menu.Set("HUD Menu", "HUD");
  Menu.Set("InventoryMenu", "Inventory");
  Menu.Set("Journal Menu", "Journal");
  Menu.Set("Kinect Menu", "Kinect");
  Menu.Set("LevelUp Menu", "LevelUp");
  Menu.Set("Loading Menu", "Loading");
  Menu.Set("Main Menu", "Main");
  Menu.Set("Lockpicking Menu", "Lockpicking");
  Menu.Set("MagicMenu", "Magic");
  Menu.Set("MapMenu", "Map");
  Menu.Set("MessageBoxMenu", "MessageBox");
  Menu.Set("Mist Menu", "Mist");
  Menu.Set("Overlay Interaction Menu", "OverlayInteraction");
  Menu.Set("Overlay Menu", "Overlay");
  Menu.Set("Quantity Menu", "Quantity");
  Menu.Set("RaceSex Menu", "RaceSex");
  Menu.Set("Sleep/Wait Menu", "Sleep");
  Menu.Set("StatsMenu", "Stats");
  Menu.Set("TitleSequence Menu", "TitleSequence");
  Menu.Set("Top Menu", "Top");
  Menu.Set("Training Menu", "Training");
  Menu.Set("Tutorial Menu", "Tutorial");
  Menu.Set("TweenMenu", "Tween");
  Menu.Set("Barter", _s_(env, "BarterMenu"));
  Menu.Set("Book", _s_(env, "Book Menu"));
  Menu.Set("Console", _s_(env, "Console"));
  Menu.Set("ConsoleNativeUI", _s_(env, "Console Native UI Menu"));
  Menu.Set("Container", _s_(env, "ContainerMenu"));
  Menu.Set("Crafting", _s_(env, "Crafting Menu"));
  Menu.Set("Credits", _s_(env, "Credits Menu"));
  Menu.Set("Cursor", _s_(env, "Cursor Menu"));
  Menu.Set("Debug", _s_(env, "Debug Text Menu"));
  Menu.Set("Dialogue", _s_(env, "Dialogue Menu"));
  Menu.Set("Fader", _s_(env, "Fader Menu"));
  Menu.Set("Favorites", _s_(env, "FavoritesMenu"));
  Menu.Set("Gift", _s_(env, "GiftMenu"));
  Menu.Set("HUD", _s_(env, "HUD Menu"));
  Menu.Set("Inventory", _s_(env, "InventoryMenu"));
  Menu.Set("Journal", _s_(env, "Journal Menu"));
  Menu.Set("Kinect", _s_(env, "Kinect Menu"));
  Menu.Set("LevelUp", _s_(env, "LevelUp Menu"));
  Menu.Set("Loading", _s_(env, "Loading Menu"));
  Menu.Set("Main", _s_(env, "Main Menu"));
  Menu.Set("Lockpicking", _s_(env, "Lockpicking Menu"));
  Menu.Set("Magic", _s_(env, "MagicMenu"));
  Menu.Set("Map", _s_(env, "MapMenu"));
  Menu.Set("MessageBox", _s_(env, "MessageBoxMenu"));
  Menu.Set("Mist", _s_(env, "Mist Menu"));
  Menu.Set("OverlayInteraction", _s_(env, "Overlay Interaction Menu"));
  Menu.Set("Overlay", _s_(env, "Overlay Menu"));
  Menu.Set("Quantity", _s_(env, "Quantity Menu"));
  Menu.Set("RaceSex", _s_(env, "RaceSex Menu"));
  Menu.Set("Sleep", _s_(env, "Sleep/Wait Menu"));
  Menu.Set("Stats", _s_(env, "StatsMenu"));
  Menu.Set("TitleSequence", _s_(env, "TitleSequence Menu"));
  Menu.Set("Top", _s_(env, "Top Menu"));
  Menu.Set("Training", _s_(env, "Training Menu"));
  Menu.Set("Tutorial", _s_(env, "Tutorial Menu"));
  Menu.Set("Tween", _s_(env, "TweenMenu"));
  exports.Set("Menu", Menu);

  auto DxScanCode = Napi::Object::New(env);
  DxScanCode.Set(_u_(0), "None");
  DxScanCode.Set(_u_(1), "Escape");
  DxScanCode.Set(_u_(2), "N1");
  DxScanCode.Set(_u_(3), "N2");
  DxScanCode.Set(_u_(4), "N3");
  DxScanCode.Set(_u_(5), "N4");
  DxScanCode.Set(_u_(6), "N5");
  DxScanCode.Set(_u_(7), "N6");
  DxScanCode.Set(_u_(8), "N7");
  DxScanCode.Set(_u_(9), "N8");
  DxScanCode.Set(_u_(10), "N9");
  DxScanCode.Set(_u_(11), "N0");
  DxScanCode.Set(_u_(12), "Minus");
  DxScanCode.Set(_u_(13), "Equals");
  DxScanCode.Set(_u_(14), "Backspace");
  DxScanCode.Set(_u_(15), "Tab");
  DxScanCode.Set(_u_(16), "Q");
  DxScanCode.Set(_u_(17), "W");
  DxScanCode.Set(_u_(18), "E");
  DxScanCode.Set(_u_(19), "R");
  DxScanCode.Set(_u_(20), "T");
  DxScanCode.Set(_u_(21), "Y");
  DxScanCode.Set(_u_(22), "U");
  DxScanCode.Set(_u_(23), "I");
  DxScanCode.Set(_u_(24), "O");
  DxScanCode.Set(_u_(25), "P");
  DxScanCode.Set(_u_(26), "LeftBracket");
  DxScanCode.Set(_u_(27), "RightBracket");
  DxScanCode.Set(_u_(28), "Enter");
  DxScanCode.Set(_u_(29), "LeftControl");
  DxScanCode.Set(_u_(30), "A");
  DxScanCode.Set(_u_(31), "S");
  DxScanCode.Set(_u_(32), "D");
  DxScanCode.Set(_u_(33), "F");
  DxScanCode.Set(_u_(34), "G");
  DxScanCode.Set(_u_(35), "H");
  DxScanCode.Set(_u_(36), "J");
  DxScanCode.Set(_u_(37), "K");
  DxScanCode.Set(_u_(38), "L");
  DxScanCode.Set(_u_(39), "Semicolon");
  DxScanCode.Set(_u_(40), "Apostrophe");
  DxScanCode.Set(_u_(41), "Console");
  DxScanCode.Set(_u_(42), "LeftShift");
  DxScanCode.Set(_u_(43), "BackSlash");
  DxScanCode.Set(_u_(44), "Z");
  DxScanCode.Set(_u_(45), "X");
  DxScanCode.Set(_u_(46), "C");
  DxScanCode.Set(_u_(47), "V");
  DxScanCode.Set(_u_(48), "B");
  DxScanCode.Set(_u_(49), "N");
  DxScanCode.Set(_u_(50), "M");
  DxScanCode.Set(_u_(51), "Comma");
  DxScanCode.Set(_u_(52), "Period");
  DxScanCode.Set(_u_(53), "ForwardSlash");
  DxScanCode.Set(_u_(54), "RightShift");
  DxScanCode.Set(_u_(55), "NumMult");
  DxScanCode.Set(_u_(56), "LeftAlt");
  DxScanCode.Set(_u_(57), "Spacebar");
  DxScanCode.Set(_u_(58), "CapsLock");
  DxScanCode.Set(_u_(59), "F1");
  DxScanCode.Set(_u_(60), "F2");
  DxScanCode.Set(_u_(61), "F3");
  DxScanCode.Set(_u_(62), "F4");
  DxScanCode.Set(_u_(63), "F5");
  DxScanCode.Set(_u_(64), "F6");
  DxScanCode.Set(_u_(65), "F7");
  DxScanCode.Set(_u_(66), "F8");
  DxScanCode.Set(_u_(67), "F9");
  DxScanCode.Set(_u_(68), "F10");
  DxScanCode.Set(_u_(69), "NumLock");
  DxScanCode.Set(_u_(70), "ScrollLock");
  DxScanCode.Set(_u_(71), "Num7");
  DxScanCode.Set(_u_(72), "Num8");
  DxScanCode.Set(_u_(73), "Num9");
  DxScanCode.Set(_u_(74), "NumMinus");
  DxScanCode.Set(_u_(75), "Num4");
  DxScanCode.Set(_u_(76), "Num5");
  DxScanCode.Set(_u_(77), "Num6");
  DxScanCode.Set(_u_(78), "NumPlus");
  DxScanCode.Set(_u_(79), "Num1");
  DxScanCode.Set(_u_(80), "Num2");
  DxScanCode.Set(_u_(81), "Num3");
  DxScanCode.Set(_u_(82), "Num0");
  DxScanCode.Set(_u_(83), "NumDot");
  DxScanCode.Set(_u_(87), "F11");
  DxScanCode.Set(_u_(88), "F12");
  DxScanCode.Set(_u_(156), "NumEnter");
  DxScanCode.Set(_u_(157), "RightControl");
  DxScanCode.Set(_u_(181), "NumSlash");
  DxScanCode.Set(_u_(183), "SysRqPtrScr");
  DxScanCode.Set(_u_(184), "RightAlt");
  DxScanCode.Set(_u_(197), "Pause");
  DxScanCode.Set(_u_(199), "Home");
  DxScanCode.Set(_u_(200), "UpArrow");
  DxScanCode.Set(_u_(201), "PgUp");
  DxScanCode.Set(_u_(203), "LeftArrow");
  DxScanCode.Set(_u_(205), "RightArrow");
  DxScanCode.Set(_u_(207), "End");
  DxScanCode.Set(_u_(208), "DownArrow");
  DxScanCode.Set(_u_(209), "PgDown");
  DxScanCode.Set(_u_(210), "Insert");
  DxScanCode.Set(_u_(211), "Delete");
  DxScanCode.Set(_u_(256), "LeftMouseButton");
  DxScanCode.Set(_u_(257), "RightMouseButton");
  DxScanCode.Set(_u_(258), "MiddleMouseButton");
  DxScanCode.Set(_u_(259), "MouseButton3");
  DxScanCode.Set(_u_(260), "MouseButton4");
  DxScanCode.Set(_u_(261), "MouseButton5");
  DxScanCode.Set(_u_(262), "MouseButton6");
  DxScanCode.Set(_u_(263), "MouseButton7");
  DxScanCode.Set(_u_(264), "MouseWheelUp");
  DxScanCode.Set(_u_(265), "MouseWheelDown");
  DxScanCode.Set("None", _n_(env, 0));
  DxScanCode.Set("Escape", _n_(env, 1));
  DxScanCode.Set("N1", _n_(env, 2));
  DxScanCode.Set("N2", _n_(env, 3));
  DxScanCode.Set("N3", _n_(env, 4));
  DxScanCode.Set("N4", _n_(env, 5));
  DxScanCode.Set("N5", _n_(env, 6));
  DxScanCode.Set("N6", _n_(env, 7));
  DxScanCode.Set("N7", _n_(env, 8));
  DxScanCode.Set("N8", _n_(env, 9));
  DxScanCode.Set("N9", _n_(env, 10));
  DxScanCode.Set("N0", _n_(env, 11));
  DxScanCode.Set("Minus", _n_(env, 12));
  DxScanCode.Set("Equals", _n_(env, 13));
  DxScanCode.Set("Backspace", _n_(env, 14));
  DxScanCode.Set("Tab", _n_(env, 15));
  DxScanCode.Set("Q", _n_(env, 16));
  DxScanCode.Set("W", _n_(env, 17));
  DxScanCode.Set("E", _n_(env, 18));
  DxScanCode.Set("R", _n_(env, 19));
  DxScanCode.Set("T", _n_(env, 20));
  DxScanCode.Set("Y", _n_(env, 21));
  DxScanCode.Set("U", _n_(env, 22));
  DxScanCode.Set("I", _n_(env, 23));
  DxScanCode.Set("O", _n_(env, 24));
  DxScanCode.Set("P", _n_(env, 25));
  DxScanCode.Set("LeftBracket", _n_(env, 26));
  DxScanCode.Set("RightBracket", _n_(env, 27));
  DxScanCode.Set("Enter", _n_(env, 28));
  DxScanCode.Set("LeftControl", _n_(env, 29));
  DxScanCode.Set("A", _n_(env, 30));
  DxScanCode.Set("S", _n_(env, 31));
  DxScanCode.Set("D", _n_(env, 32));
  DxScanCode.Set("F", _n_(env, 33));
  DxScanCode.Set("G", _n_(env, 34));
  DxScanCode.Set("H", _n_(env, 35));
  DxScanCode.Set("J", _n_(env, 36));
  DxScanCode.Set("K", _n_(env, 37));
  DxScanCode.Set("L", _n_(env, 38));
  DxScanCode.Set("Semicolon", _n_(env, 39));
  DxScanCode.Set("Apostrophe", _n_(env, 40));
  DxScanCode.Set("Console", _n_(env, 41));
  DxScanCode.Set("LeftShift", _n_(env, 42));
  DxScanCode.Set("BackSlash", _n_(env, 43));
  DxScanCode.Set("Z", _n_(env, 44));
  DxScanCode.Set("X", _n_(env, 45));
  DxScanCode.Set("C", _n_(env, 46));
  DxScanCode.Set("V", _n_(env, 47));
  DxScanCode.Set("B", _n_(env, 48));
  DxScanCode.Set("N", _n_(env, 49));
  DxScanCode.Set("M", _n_(env, 50));
  DxScanCode.Set("Comma", _n_(env, 51));
  DxScanCode.Set("Period", _n_(env, 52));
  DxScanCode.Set("ForwardSlash", _n_(env, 53));
  DxScanCode.Set("RightShift", _n_(env, 54));
  DxScanCode.Set("NumMult", _n_(env, 55));
  DxScanCode.Set("LeftAlt", _n_(env, 56));
  DxScanCode.Set("Spacebar", _n_(env, 57));
  DxScanCode.Set("CapsLock", _n_(env, 58));
  DxScanCode.Set("F1", _n_(env, 59));
  DxScanCode.Set("F2", _n_(env, 60));
  DxScanCode.Set("F3", _n_(env, 61));
  DxScanCode.Set("F4", _n_(env, 62));
  DxScanCode.Set("F5", _n_(env, 63));
  DxScanCode.Set("F6", _n_(env, 64));
  DxScanCode.Set("F7", _n_(env, 65));
  DxScanCode.Set("F8", _n_(env, 66));
  DxScanCode.Set("F9", _n_(env, 67));
  DxScanCode.Set("F10", _n_(env, 68));
  DxScanCode.Set("NumLock", _n_(env, 69));
  DxScanCode.Set("ScrollLock", _n_(env, 70));
  DxScanCode.Set("Num7", _n_(env, 71));
  DxScanCode.Set("Num8", _n_(env, 72));
  DxScanCode.Set("Num9", _n_(env, 73));
  DxScanCode.Set("NumMinus", _n_(env, 74));
  DxScanCode.Set("Num4", _n_(env, 75));
  DxScanCode.Set("Num5", _n_(env, 76));
  DxScanCode.Set("Num6", _n_(env, 77));
  DxScanCode.Set("NumPlus", _n_(env, 78));
  DxScanCode.Set("Num1", _n_(env, 79));
  DxScanCode.Set("Num2", _n_(env, 80));
  DxScanCode.Set("Num3", _n_(env, 81));
  DxScanCode.Set("Num0", _n_(env, 82));
  DxScanCode.Set("NumDot", _n_(env, 83));
  DxScanCode.Set("F11", _n_(env, 87));
  DxScanCode.Set("F12", _n_(env, 88));
  DxScanCode.Set("NumEnter", _n_(env, 156));
  DxScanCode.Set("RightControl", _n_(env, 157));
  DxScanCode.Set("NumSlash", _n_(env, 181));
  DxScanCode.Set("SysRqPtrScr", _n_(env, 183));
  DxScanCode.Set("RightAlt", _n_(env, 184));
  DxScanCode.Set("Pause", _n_(env, 197));
  DxScanCode.Set("Home", _n_(env, 199));
  DxScanCode.Set("UpArrow", _n_(env, 200));
  DxScanCode.Set("PgUp", _n_(env, 201));
  DxScanCode.Set("LeftArrow", _n_(env, 203));
  DxScanCode.Set("RightArrow", _n_(env, 205));
  DxScanCode.Set("End", _n_(env, 207));
  DxScanCode.Set("DownArrow", _n_(env, 208));
  DxScanCode.Set("PgDown", _n_(env, 209));
  DxScanCode.Set("Insert", _n_(env, 210));
  DxScanCode.Set("Delete", _n_(env, 211));
  DxScanCode.Set("LeftMouseButton", _n_(env, 256));
  DxScanCode.Set("RightMouseButton", _n_(env, 257));
  DxScanCode.Set("MiddleMouseButton", _n_(env, 258));
  DxScanCode.Set("MouseButton3", _n_(env, 259));
  DxScanCode.Set("MouseButton4", _n_(env, 260));
  DxScanCode.Set("MouseButton5", _n_(env, 261));
  DxScanCode.Set("MouseButton6", _n_(env, 262));
  DxScanCode.Set("MouseButton7", _n_(env, 263));
  DxScanCode.Set("MouseWheelUp", _n_(env, 264));
  DxScanCode.Set("MouseWheelDown", _n_(env, 265));
  exports.Set("DxScanCode", DxScanCode);

  auto FormType = Napi::Object::New(env);
  FormType.Set(_u_(83), "ANIO");
  FormType.Set(_u_(102), "ARMA");
  FormType.Set(_u_(16), "AcousticSpace");
  FormType.Set(_u_(6), "Action");
  FormType.Set(_u_(24), "Activator");
  FormType.Set(_u_(95), "ActorValueInfo");
  FormType.Set(_u_(94), "AddonNode");
  FormType.Set(_u_(42), "Ammo");
  FormType.Set(_u_(33), "Apparatus");
  FormType.Set(_u_(26), "Armor");
  FormType.Set(_u_(64), "ArrowProjectile");
  FormType.Set(_u_(125), "Art");
  FormType.Set(_u_(123), "AssociationType");
  FormType.Set(_u_(69), "BarrierProjectile");
  FormType.Set(_u_(66), "BeamProjectile");
  FormType.Set(_u_(93), "BodyPartData");
  FormType.Set(_u_(27), "Book");
  FormType.Set(_u_(97), "CameraPath");
  FormType.Set(_u_(96), "CameraShot");
  FormType.Set(_u_(60), "Cell");
  FormType.Set(_u_(62), "Character");
  FormType.Set(_u_(10), "Class");
  FormType.Set(_u_(55), "Climate");
  FormType.Set(_u_(132), "CollisionLayer");
  FormType.Set(_u_(133), "ColorForm");
  FormType.Set(_u_(80), "CombatStyle");
  FormType.Set(_u_(68), "ConeProjectile");
  FormType.Set(_u_(49), "ConstructibleObject");
  FormType.Set(_u_(28), "Container");
  FormType.Set(_u_(117), "DLVW");
  FormType.Set(_u_(88), "Debris");
  FormType.Set(_u_(107), "DefaultObject");
  FormType.Set(_u_(115), "DialogueBranch");
  FormType.Set(_u_(29), "Door");
  FormType.Set(_u_(129), "DualCastData");
  FormType.Set(_u_(18), "EffectSetting");
  FormType.Set(_u_(85), "EffectShader");
  FormType.Set(_u_(21), "Enchantment");
  FormType.Set(_u_(103), "EncounterZone");
  FormType.Set(_u_(120), "EquipSlot");
  FormType.Set(_u_(87), "Explosion");
  FormType.Set(_u_(13), "Eyes");
  FormType.Set(_u_(11), "Faction");
  FormType.Set(_u_(67), "FlameProjectile");
  FormType.Set(_u_(39), "Flora");
  FormType.Set(_u_(110), "Footstep");
  FormType.Set(_u_(111), "FootstepSet");
  FormType.Set(_u_(40), "Furniture");
  FormType.Set(_u_(3), "GMST");
  FormType.Set(_u_(9), "Global");
  FormType.Set(_u_(37), "Grass");
  FormType.Set(_u_(65), "GrenadeProjectile");
  FormType.Set(_u_(2), "Group");
  FormType.Set(_u_(51), "Hazard");
  FormType.Set(_u_(12), "HeadPart");
  FormType.Set(_u_(78), "Idle");
  FormType.Set(_u_(47), "IdleMarker");
  FormType.Set(_u_(89), "ImageSpace");
  FormType.Set(_u_(90), "ImageSpaceModifier");
  FormType.Set(_u_(100), "ImpactData");
  FormType.Set(_u_(101), "ImpactDataSet");
  FormType.Set(_u_(30), "Ingredient");
  FormType.Set(_u_(45), "Key");
  FormType.Set(_u_(4), "Keyword");
  FormType.Set(_u_(72), "Land");
  FormType.Set(_u_(20), "LandTexture");
  FormType.Set(_u_(44), "LeveledCharacter");
  FormType.Set(_u_(53), "LeveledItem");
  FormType.Set(_u_(82), "LeveledSpell");
  FormType.Set(_u_(31), "Light");
  FormType.Set(_u_(108), "LightingTemplate");
  FormType.Set(_u_(91), "List");
  FormType.Set(_u_(81), "LoadScreen");
  FormType.Set(_u_(104), "Location");
  FormType.Set(_u_(5), "LocationRef");
  FormType.Set(_u_(126), "Material");
  FormType.Set(_u_(99), "MaterialType");
  FormType.Set(_u_(8), "MenuIcon");
  FormType.Set(_u_(105), "Message");
  FormType.Set(_u_(32), "Misc");
  FormType.Set(_u_(63), "MissileProjectile");
  FormType.Set(_u_(36), "MovableStatic");
  FormType.Set(_u_(127), "MovementType");
  FormType.Set(_u_(116), "MusicTrack");
  FormType.Set(_u_(109), "MusicType");
  FormType.Set(_u_(59), "NAVI");
  FormType.Set(_u_(43), "NPC");
  FormType.Set(_u_(73), "NavMesh");
  FormType.Set(_u_(0), "None");
  FormType.Set(_u_(48), "Note");
  FormType.Set(_u_(124), "Outfit");
  FormType.Set(_u_(70), "PHZD");
  FormType.Set(_u_(79), "Package");
  FormType.Set(_u_(92), "Perk");
  FormType.Set(_u_(46), "Potion");
  FormType.Set(_u_(50), "Projectile");
  FormType.Set(_u_(77), "Quest");
  FormType.Set(_u_(14), "Race");
  FormType.Set(_u_(106), "Ragdoll");
  FormType.Set(_u_(61), "Reference");
  FormType.Set(_u_(57), "ReferenceEffect");
  FormType.Set(_u_(58), "Region");
  FormType.Set(_u_(121), "Relationship");
  FormType.Set(_u_(134), "ReverbParam");
  FormType.Set(_u_(122), "Scene");
  FormType.Set(_u_(19), "Script");
  FormType.Set(_u_(23), "ScrollItem");
  FormType.Set(_u_(56), "ShaderParticleGeometryData");
  FormType.Set(_u_(119), "Shout");
  FormType.Set(_u_(17), "Skill");
  FormType.Set(_u_(52), "SoulGem");
  FormType.Set(_u_(15), "Sound");
  FormType.Set(_u_(130), "SoundCategory");
  FormType.Set(_u_(128), "SoundDescriptor");
  FormType.Set(_u_(131), "SoundOutput");
  FormType.Set(_u_(22), "Spell");
  FormType.Set(_u_(34), "Static");
  FormType.Set(_u_(35), "StaticCollection");
  FormType.Set(_u_(112), "StoryBranchNode");
  FormType.Set(_u_(114), "StoryEventNode");
  FormType.Set(_u_(113), "StoryQuestNode");
  FormType.Set(_u_(1), "TES4");
  FormType.Set(_u_(74), "TLOD");
  FormType.Set(_u_(86), "TOFT");
  FormType.Set(_u_(25), "TalkingActivator");
  FormType.Set(_u_(7), "TextureSet");
  FormType.Set(_u_(75), "Topic");
  FormType.Set(_u_(76), "TopicInfo");
  FormType.Set(_u_(38), "Tree");
  FormType.Set(_u_(98), "VoiceType");
  FormType.Set(_u_(84), "Water");
  FormType.Set(_u_(41), "Weapon");
  FormType.Set(_u_(54), "Weather");
  FormType.Set(_u_(118), "WordOfPower");
  FormType.Set(_u_(71), "WorldSpace");
  FormType.Set("ANIO", _n_(env, 83));
  FormType.Set("ARMA", _n_(env, 102));
  FormType.Set("AcousticSpace", _n_(env, 16));
  FormType.Set("Action", _n_(env, 6));
  FormType.Set("Activator", _n_(env, 24));
  FormType.Set("ActorValueInfo", _n_(env, 95));
  FormType.Set("AddonNode", _n_(env, 94));
  FormType.Set("Ammo", _n_(env, 42));
  FormType.Set("Apparatus", _n_(env, 33));
  FormType.Set("Armor", _n_(env, 26));
  FormType.Set("ArrowProjectile", _n_(env, 64));
  FormType.Set("Art", _n_(env, 125));
  FormType.Set("AssociationType", _n_(env, 123));
  FormType.Set("BarrierProjectile", _n_(env, 69));
  FormType.Set("BeamProjectile", _n_(env, 66));
  FormType.Set("BodyPartData", _n_(env, 93));
  FormType.Set("Book", _n_(env, 27));
  FormType.Set("CameraPath", _n_(env, 97));
  FormType.Set("CameraShot", _n_(env, 96));
  FormType.Set("Cell", _n_(env, 60));
  FormType.Set("Character", _n_(env, 62));
  FormType.Set("Class", _n_(env, 10));
  FormType.Set("Climate", _n_(env, 55));
  FormType.Set("CollisionLayer", _n_(env, 132));
  FormType.Set("ColorForm", _n_(env, 133));
  FormType.Set("CombatStyle", _n_(env, 80));
  FormType.Set("ConeProjectile", _n_(env, 68));
  FormType.Set("ConstructibleObject", _n_(env, 49));
  FormType.Set("Container", _n_(env, 28));
  FormType.Set("DLVW", _n_(env, 117));
  FormType.Set("Debris", _n_(env, 88));
  FormType.Set("DefaultObject", _n_(env, 107));
  FormType.Set("DialogueBranch", _n_(env, 115));
  FormType.Set("Door", _n_(env, 29));
  FormType.Set("DualCastData", _n_(env, 129));
  FormType.Set("EffectSetting", _n_(env, 18));
  FormType.Set("EffectShader", _n_(env, 85));
  FormType.Set("Enchantment", _n_(env, 21));
  FormType.Set("EncounterZone", _n_(env, 103));
  FormType.Set("EquipSlot", _n_(env, 120));
  FormType.Set("Explosion", _n_(env, 87));
  FormType.Set("Eyes", _n_(env, 13));
  FormType.Set("Faction", _n_(env, 11));
  FormType.Set("FlameProjectile", _n_(env, 67));
  FormType.Set("Flora", _n_(env, 39));
  FormType.Set("Footstep", _n_(env, 110));
  FormType.Set("FootstepSet", _n_(env, 111));
  FormType.Set("Furniture", _n_(env, 40));
  FormType.Set("GMST", _n_(env, 3));
  FormType.Set("Global", _n_(env, 9));
  FormType.Set("Grass", _n_(env, 37));
  FormType.Set("GrenadeProjectile", _n_(env, 65));
  FormType.Set("Group", _n_(env, 2));
  FormType.Set("Hazard", _n_(env, 51));
  FormType.Set("HeadPart", _n_(env, 12));
  FormType.Set("Idle", _n_(env, 78));
  FormType.Set("IdleMarker", _n_(env, 47));
  FormType.Set("ImageSpace", _n_(env, 89));
  FormType.Set("ImageSpaceModifier", _n_(env, 90));
  FormType.Set("ImpactData", _n_(env, 100));
  FormType.Set("ImpactDataSet", _n_(env, 101));
  FormType.Set("Ingredient", _n_(env, 30));
  FormType.Set("Key", _n_(env, 45));
  FormType.Set("Keyword", _n_(env, 4));
  FormType.Set("Land", _n_(env, 72));
  FormType.Set("LandTexture", _n_(env, 20));
  FormType.Set("LeveledCharacter", _n_(env, 44));
  FormType.Set("LeveledItem", _n_(env, 53));
  FormType.Set("LeveledSpell", _n_(env, 82));
  FormType.Set("Light", _n_(env, 31));
  FormType.Set("LightingTemplate", _n_(env, 108));
  FormType.Set("List", _n_(env, 91));
  FormType.Set("LoadScreen", _n_(env, 81));
  FormType.Set("Location", _n_(env, 104));
  FormType.Set("LocationRef", _n_(env, 5));
  FormType.Set("Material", _n_(env, 126));
  FormType.Set("MaterialType", _n_(env, 99));
  FormType.Set("MenuIcon", _n_(env, 8));
  FormType.Set("Message", _n_(env, 105));
  FormType.Set("Misc", _n_(env, 32));
  FormType.Set("MissileProjectile", _n_(env, 63));
  FormType.Set("MovableStatic", _n_(env, 36));
  FormType.Set("MovementType", _n_(env, 127));
  FormType.Set("MusicTrack", _n_(env, 116));
  FormType.Set("MusicType", _n_(env, 109));
  FormType.Set("NAVI", _n_(env, 59));
  FormType.Set("NPC", _n_(env, 43));
  FormType.Set("NavMesh", _n_(env, 73));
  FormType.Set("None", _n_(env, 0));
  FormType.Set("Note", _n_(env, 48));
  FormType.Set("Outfit", _n_(env, 124));
  FormType.Set("PHZD", _n_(env, 70));
  FormType.Set("Package", _n_(env, 79));
  FormType.Set("Perk", _n_(env, 92));
  FormType.Set("Potion", _n_(env, 46));
  FormType.Set("Projectile", _n_(env, 50));
  FormType.Set("Quest", _n_(env, 77));
  FormType.Set("Race", _n_(env, 14));
  FormType.Set("Ragdoll", _n_(env, 106));
  FormType.Set("Reference", _n_(env, 61));
  FormType.Set("ReferenceEffect", _n_(env, 57));
  FormType.Set("Region", _n_(env, 58));
  FormType.Set("Relationship", _n_(env, 121));
  FormType.Set("ReverbParam", _n_(env, 134));
  FormType.Set("Scene", _n_(env, 122));
  FormType.Set("Script", _n_(env, 19));
  FormType.Set("ScrollItem", _n_(env, 23));
  FormType.Set("ShaderParticleGeometryData", _n_(env, 56));
  FormType.Set("Shout", _n_(env, 119));
  FormType.Set("Skill", _n_(env, 17));
  FormType.Set("SoulGem", _n_(env, 52));
  FormType.Set("Sound", _n_(env, 15));
  FormType.Set("SoundCategory", _n_(env, 130));
  FormType.Set("SoundDescriptor", _n_(env, 128));
  FormType.Set("SoundOutput", _n_(env, 131));
  FormType.Set("Spell", _n_(env, 22));
  FormType.Set("Static", _n_(env, 34));
  FormType.Set("StaticCollection", _n_(env, 35));
  FormType.Set("StoryBranchNode", _n_(env, 112));
  FormType.Set("StoryEventNode", _n_(env, 114));
  FormType.Set("StoryQuestNode", _n_(env, 113));
  FormType.Set("TES4", _n_(env, 1));
  FormType.Set("TLOD", _n_(env, 74));
  FormType.Set("TOFT", _n_(env, 86));
  FormType.Set("TalkingActivator", _n_(env, 25));
  FormType.Set("TextureSet", _n_(env, 7));
  FormType.Set("Topic", _n_(env, 75));
  FormType.Set("TopicInfo", _n_(env, 76));
  FormType.Set("Tree", _n_(env, 38));
  FormType.Set("VoiceType", _n_(env, 98));
  FormType.Set("Water", _n_(env, 84));
  FormType.Set("Weapon", _n_(env, 41));
  FormType.Set("Weather", _n_(env, 54));
  FormType.Set("WordOfPower", _n_(env, 118));
  FormType.Set("WorldSpace", _n_(env, 71));
  exports.Set("FormType", FormType);

  auto WeaponType = Napi::Object::New(env);
  WeaponType.Set(_u_(0), "Fist");
  WeaponType.Set(_u_(1), "Sword");
  WeaponType.Set(_u_(2), "Dagger");
  WeaponType.Set(_u_(3), "WarAxe");
  WeaponType.Set(_u_(4), "Mace");
  WeaponType.Set(_u_(5), "Greatsword");
  WeaponType.Set(_u_(6), "Battleaxe");
  WeaponType.Set(_u_(6), "Warhammer");
  WeaponType.Set(_u_(7), "Bow");
  WeaponType.Set(_u_(8), "Staff");
  WeaponType.Set(_u_(9), "Crossbow");
  WeaponType.Set("Fist", _n_(env, 0));
  WeaponType.Set("Sword", _n_(env, 1));
  WeaponType.Set("Dagger", _n_(env, 2));
  WeaponType.Set("WarAxe", _n_(env, 3));
  WeaponType.Set("Mace", _n_(env, 4));
  WeaponType.Set("Greatsword", _n_(env, 5));
  WeaponType.Set("Battleaxe", _n_(env, 6));
  WeaponType.Set("Warhammer", _n_(env, 6));
  WeaponType.Set("Bow", _n_(env, 7));
  WeaponType.Set("Staff", _n_(env, 8));
  WeaponType.Set("Crossbow", _n_(env, 9));
  exports.Set("WeaponType", WeaponType);

  auto EquippedItemType = Napi::Object::New(env);
  EquippedItemType.Set(_u_(0), "Fist");
  EquippedItemType.Set(_u_(1), "Sword");
  EquippedItemType.Set(_u_(2), "Dagger");
  EquippedItemType.Set(_u_(3), "WarAxe");
  EquippedItemType.Set(_u_(4), "Mace");
  EquippedItemType.Set(_u_(5), "Greatsword");
  EquippedItemType.Set(_u_(6), "Battleaxe");
  EquippedItemType.Set(_u_(6), "Warhammer");
  EquippedItemType.Set(_u_(7), "Bow");
  EquippedItemType.Set(_u_(8), "Staff");
  EquippedItemType.Set(_u_(9), "Spell");
  EquippedItemType.Set(_u_(9), "SpellOrScroll");
  EquippedItemType.Set(_u_(10), "Shield");
  EquippedItemType.Set(_u_(11), "Torch");
  EquippedItemType.Set(_u_(12), "Crossbow");
  EquippedItemType.Set("Fist", _n_(env, 0));
  EquippedItemType.Set("Sword", _n_(env, 1));
  EquippedItemType.Set("Dagger", _n_(env, 2));
  EquippedItemType.Set("WarAxe", _n_(env, 3));
  EquippedItemType.Set("Mace", _n_(env, 4));
  EquippedItemType.Set("Greatsword", _n_(env, 5));
  EquippedItemType.Set("Battleaxe", _n_(env, 6));
  EquippedItemType.Set("Warhammer", _n_(env, 6));
  EquippedItemType.Set("Bow", _n_(env, 7));
  EquippedItemType.Set("Staff", _n_(env, 8));
  EquippedItemType.Set("Spell", _n_(env, 9));
  EquippedItemType.Set("SpellOrScroll", _n_(env, 9));
  EquippedItemType.Set("Shield", _n_(env, 10));
  EquippedItemType.Set("Torch", _n_(env, 11));
  EquippedItemType.Set("Crossbow", _n_(env, 12));
  exports.Set("EquippedItemType", EquippedItemType);

  auto SlotMask = Napi::Object::New(env);
  SlotMask.Set(_u_(1), "Head");
  SlotMask.Set(_u_(2), "Hair");
  SlotMask.Set(_u_(4), "Body");
  SlotMask.Set(_u_(8), "Hands");
  SlotMask.Set(_u_(16), "Forearms");
  SlotMask.Set(_u_(32), "Amulet");
  SlotMask.Set(_u_(64), "Ring");
  SlotMask.Set(_u_(128), "Feet");
  SlotMask.Set(_u_(256), "Calves");
  SlotMask.Set(_u_(512), "Shield");
  SlotMask.Set(_u_(1024), "Tail");
  SlotMask.Set(_u_(2048), "LongHair");
  SlotMask.Set(_u_(4096), "Circlet");
  SlotMask.Set(_u_(8192), "Ears");
  SlotMask.Set(_u_(16384), "Face");
  SlotMask.Set(_u_(16384), "Mouth");
  SlotMask.Set(_u_(32768), "Neck");
  SlotMask.Set(_u_(65536), "ChestOuter");
  SlotMask.Set(_u_(65536), "ChestPrimary");
  SlotMask.Set(_u_(131072), "Back");
  SlotMask.Set(_u_(262144), "Misc01");
  SlotMask.Set(_u_(524288), "PelvisOuter");
  SlotMask.Set(_u_(524288), "PelvisPrimary");
  SlotMask.Set(_u_(1048576), "DecapitateHead");
  SlotMask.Set(_u_(2097152), "Decapitate");
  SlotMask.Set(_u_(4194304), "PelvisUnder");
  SlotMask.Set(_u_(4194304), "PelvisSecondary");
  SlotMask.Set(_u_(8388608), "LegOuter");
  SlotMask.Set(_u_(8388608), "LegPrimary");
  SlotMask.Set(_u_(16777216), "LegUnder");
  SlotMask.Set(_u_(16777216), "LegSecondary");
  SlotMask.Set(_u_(33554432), "FaceAlt");
  SlotMask.Set(_u_(33554432), "Jewelry");
  SlotMask.Set(_u_(67108864), "ChestUnder");
  SlotMask.Set(_u_(67108864), "ChestSecondary");
  SlotMask.Set(_u_(134217728), "Shoulder");
  SlotMask.Set(_u_(268435456), "ArmUnder");
  SlotMask.Set(_u_(268435456), "ArmSecondary");
  SlotMask.Set(_u_(268435456), "ArmLeft");
  SlotMask.Set(_u_(536870912), "ArmOuter");
  SlotMask.Set(_u_(536870912), "ArmPrimary");
  SlotMask.Set(_u_(536870912), "ArmRight");
  SlotMask.Set(_u_(1073741824), "Misc02");
  SlotMask.Set(_u_(2147483648), "FX01");
  SlotMask.Set("Head", _n_(env, 1));
  SlotMask.Set("Hair", _n_(env, 2));
  SlotMask.Set("Body", _n_(env, 4));
  SlotMask.Set("Hands", _n_(env, 8));
  SlotMask.Set("Forearms", _n_(env, 16));
  SlotMask.Set("Amulet", _n_(env, 32));
  SlotMask.Set("Ring", _n_(env, 64));
  SlotMask.Set("Feet", _n_(env, 128));
  SlotMask.Set("Calves", _n_(env, 256));
  SlotMask.Set("Shield", _n_(env, 512));
  SlotMask.Set("Tail", _n_(env, 1024));
  SlotMask.Set("LongHair", _n_(env, 2048));
  SlotMask.Set("Circlet", _n_(env, 4096));
  SlotMask.Set("Ears", _n_(env, 8192));
  SlotMask.Set("Face", _n_(env, 16384));
  SlotMask.Set("Mouth", _n_(env, 16384));
  SlotMask.Set("Neck", _n_(env, 32768));
  SlotMask.Set("ChestOuter", _n_(env, 65536));
  SlotMask.Set("ChestPrimary", _n_(env, 65536));
  SlotMask.Set("Back", _n_(env, 131072));
  SlotMask.Set("Misc01", _n_(env, 262144));
  SlotMask.Set("PelvisOuter", _n_(env, 524288));
  SlotMask.Set("PelvisPrimary", _n_(env, 524288));
  SlotMask.Set("DecapitateHead", _n_(env, 1048576));
  SlotMask.Set("Decapitate", _n_(env, 2097152));
  SlotMask.Set("PelvisUnder", _n_(env, 4194304));
  SlotMask.Set("PelvisSecondary", _n_(env, 4194304));
  SlotMask.Set("LegOuter", _n_(env, 8388608));
  SlotMask.Set("LegPrimary", _n_(env, 8388608));
  SlotMask.Set("LegUnder", _n_(env, 16777216));
  SlotMask.Set("LegSecondary", _n_(env, 16777216));
  SlotMask.Set("FaceAlt", _n_(env, 33554432));
  SlotMask.Set("Jewelry", _n_(env, 33554432));
  SlotMask.Set("ChestUnder", _n_(env, 67108864));
  SlotMask.Set("ChestSecondary", _n_(env, 67108864));
  SlotMask.Set("Shoulder", _n_(env, 134217728));
  SlotMask.Set("ArmUnder", _n_(env, 268435456));
  SlotMask.Set("ArmSecondary", _n_(env, 268435456));
  SlotMask.Set("ArmLeft", _n_(env, 268435456));
  SlotMask.Set("ArmOuter", _n_(env, 536870912));
  SlotMask.Set("ArmPrimary", _n_(env, 536870912));
  SlotMask.Set("ArmRight", _n_(env, 536870912));
  SlotMask.Set("Misc02", _n_(env, 1073741824));
  SlotMask.Set("FX01", _n_(env, 2147483648));
  exports.Set("SlotMask", SlotMask);

  auto SpriteEffects = Napi::Object::New(env);
  SpriteEffects.Set(_u_(0), "None");
  SpriteEffects.Set(_u_(1), "FlipHorizontally");
  SpriteEffects.Set(_u_(2), "FlipVertically");
  SpriteEffects.Set("None", _n_(env, 0));
  SpriteEffects.Set("FlipHorizontally", _n_(env, 1));
  SpriteEffects.Set("FlipVertically", _n_(env, 2));
  exports.Set("SpriteEffects", SpriteEffects);
}
