export declare class PapyrusObject {
    static from(papyrusObject: PapyrusObject | null): PapyrusObject | null;
}
export type PapyrusValue = PapyrusObject | number | string | boolean | null | PapyrusValue[];
export declare function printConsole(...arguments: unknown[]): void;
export declare function writeLogs(pluginName: string, ...arguments: unknown[]): void;
export declare function setPrintConsolePrefixesEnabled(enabled: boolean): void;
export declare function callNative(className: string, functionName: string, self?: PapyrusObject, ...args: PapyrusValue[]): PapyrusValue;
export declare function getJsMemoryUsage(): number;
export declare function getPluginSourceCode(pluginName: string): string;
export declare function writePlugin(pluginName: string, newSources: string): string;
export declare function getPlatformVersion(): string;
export declare function disableCtrlPrtScnHotkey(): void;
export declare function sendIpcMessage(targetSystemName: string, message: ArrayBuffer): void;
export declare function encodeUtf8(text: string): ArrayBuffer;
export declare function decodeUtf8(buffer: ArrayBuffer): string;
export declare let storage: Record<string, unknown>;
export declare let settings: Record<string, Record<string, unknown>>;

export declare function on(eventName: 'update', callback: () => void): void;
export declare function once(eventName: 'update', callback: () => void): void;

export declare function on(eventName: 'tick', callback: () => void): void;
export declare function once(eventName: 'tick', callback: () => void): void;

export interface IpcMessageEvent {
    sourceSystemName: string;
    message: ArrayBuffer;
}

export declare function on(eventName: 'ipcMessage', callback: (event: IpcMessageEvent) => void): void;
export declare function once(eventName: 'ipcMessage', callback: (event: IpcMessageEvent) => void): void;

export interface Face {
    hairColor: number;
    bodySkinColor: number;
    headTextureSetId: number;
    headPartIds: number[];
    presets: number[];
}

export interface ChangeFormNpc {
    raceId?: number;
    name?: string;
    face?: Face;
}

export declare function loadGame(pos: number[], angle: number[], worldOrCell: number, changeFormNpc?: ChangeFormNpc): void;

export declare function worldPointToScreenPoint(...args: number[][]): number[][];

export type PacketType = 'message' | 'disconnect' | 'connectionAccepted' | 'connectionFailed' | 'connectionDenied';

// Available only if multiplayer is installed on user's machine
interface MpClientPlugin {
    getVersion(): string;
    createClient(host: string, port: number): void;
    destroyClient(): void;
    isConnected(): boolean;
    tick(tickHandler: (packetType: PacketType, jsonContent: string, error: string) => void): void;
    send(jsonContent: string, reliable: boolean): void;
}
export declare let mpClientPlugin: MpClientPlugin;

export interface Browser {
  setVisible(visible: boolean): void;
  isVisible(): boolean;
  setFocused(focused: boolean): void;
  isFocused(): boolean;
  loadUrl(url: string): void;
  getToken(): string;
  executeJavaScript(src: string): void;
}
export declare let browser: Browser;

export interface Win32 {
  loadUrl(url: string): void;
}
export declare let win32: Win32;

export interface ExtraData {
  type: 'Health' | 'Count' | 'Enchantment' | 'Charge' | 'TextDisplayData' | 'Soul' | 'Poison' | 'Worn' | 'WornLeft';
}
export interface ExtraHealth extends ExtraData {
  type: 'Health';
  health: number;
}
export interface ExtraCount extends ExtraData {
  type: 'Count';
  count: number;
}
export interface ExtraEnchantment extends ExtraData {
  type: 'Enchantment';
  enchantmentId: number;
  maxCharge: number;
  removeOnUnequip: boolean;
}
export interface ExtraCharge extends ExtraData {
  type: 'Charge';
  charge: number;
}
export interface ExtraTextDisplayData extends ExtraData {
  type: 'TextDisplayData';
  name: string;
}
export interface ExtraSoul extends ExtraData {
  type: 'Soul';
  soul: 0 | 1 | 2 | 3 | 4 | 5;
}
export interface ExtraPoison extends ExtraData {
  type: 'Poison';
  poisonId: number;
  count: number;
}
export interface ExtraWorn extends ExtraData {
  type: 'Worn';
}
export interface ExtraWornLeft extends ExtraData {
  type: 'WornLeft';
}
export type BaseExtraList = ExtraData[];
export interface InventoryChangesEntry {
  countDelta: number;
  baseId: number;
  extendDataList: BaseExtraList[];
}
export declare let getExtraContainerChanges: (objectReferenceId: number) => InventoryChangesEntry[];

export interface InventoryEntry {
  count: number;
  baseId: number;
}
export declare let getContainer: (baseId: number) => InventoryEntry[];

export interface ActivateEvent {
    target: ObjectReference,
    caster: ObjectReference,
    isCrimeToActivate: boolean
}

export interface MoveAttachDetachEvent {
    movedRef: ObjectReference,
    isCellAttached: boolean
}
export interface WaitStopEvent {
    isInterrupted: boolean
}
export interface ObjectLoadedEvent {
    object: Form,
    isLoaded: boolean
}
export interface LockChangedEvent {
    lockedObject: ObjectReference
}

export interface CellFullyLoadedEvent {
    cell: Cell
}

export interface GrabReleaseEvent {
    refr: ObjectReference,
    isGrabbed: boolean
}

export interface SwitchRaceCompleteEvent {
    subject: ObjectReference
}

export interface UniqueIDChangeEvent {
    oldBaseID: number,
    newBaseID: number,
    oldUniqueID: number,
    newUniqueID: number
}

export interface TrackedStatsEvent {
    statName: string,
    newValue: number
}

export interface InitScriptEvent {
    initializedObject: ObjectReference
}

export interface ResetEvent {
    object: ObjectReference
}

export interface CombatEvent {
    target: ObjectReference,
    actor: ObjectReference,
    isCombat: boolean,
    isSearching: boolean
}

export interface DeathEvent {
    actorDying: ObjectReference,
    actorKiller: ObjectReference
}

export interface ContainerChangedEvent {
    oldContainer: ObjectReference,
    newContainer: ObjectReference,
    baseObj: Form,
    numItems: number,
    uniqueID: number,
    reference: ObjectReference
}

export interface HitEvent {
    target: ObjectReference,
    aggressor: ObjectReference,
    source: Form,
    projectile: Projectile,
    isPowerAttack: boolean,
    isSneakAttack: boolean,
    isBashAttack: boolean,
    isHitBlocked: boolean
}

export interface EquipEvent {
    actor: ObjectReference,
    baseObj: Form,
    uniqueId: number,
    originalRefr: ObjectReference
}

export interface ActiveEffectApplyRemoveEvent {
    activeEffect: ActiveMagicEffect,
    effect: MagicEffect,
    caster: ObjectReference,
    target: ObjectReference
}

export interface MenuOpenEvent {
    name: string
}

export interface MenuCloseEvent {
    name: string
}

export interface MagicEffectApplyEvent {
    activeEffect: ActiveMagicEffect,
    effect: MagicEffect,
    caster: ObjectReference,
    target: ObjectReference
}

export interface BrowserMessageEvent {
    arguments: unknown[]
}

/*
* Note: The message text can contain any characters, including `'` `"` `\`.
* Before sending the text to the browser using "browser.executeJavaScript", it should be escaped.
*/
export interface ConsoleMessageEvent {
    message: string
}

export declare function on(eventName: 'activate', callback: (event: ActivateEvent) => void): void;
export declare function once(eventName: 'activate', callback: (event: ActivateEvent) => void): void;

export declare function on(eventName: 'waitStop', callback: (event: WaitStopEvent) => void): void;
export declare function once(eventName: 'waitStop', callback: (event: WaitStopEvent) => void): void;

export declare function on(eventName: 'objectLoaded', callback: (event: ObjectLoadedEvent) => void): void;
export declare function once(eventName: 'objectLoaded', callback: (event: ObjectLoadedEvent) => void): void;

export declare function on(eventName: 'moveAttachDetach', callback: (event: MoveAttachDetachEvent) => void): void;
export declare function once(eventName: 'moveAttachDetach', callback: (event: MoveAttachDetachEvent) => void): void;

export declare function on(eventName: 'lockChanged', callback: (event: LockChangedEvent) => void): void;
export declare function once(eventName: 'lockChanged', callback: (event: LockChangedEvent) => void): void;

export declare function on(eventName: 'grabRelease', callback: (event: GrabReleaseEvent) => void): void;
export declare function once(eventName: 'grabRelease', callback: (event: GrabReleaseEvent) => void): void;

export declare function on(eventName: 'cellFullyLoaded', callback: (event: CellFullyLoadedEvent) => void): void;
export declare function once(eventName: 'cellFullyLoaded', callback: (event: CellFullyLoadedEvent) => void): void;

export declare function on(eventName: 'switchRaceComplete', callback: (event: SwitchRaceCompleteEvent) => void): void;
export declare function once(eventName: 'switchRaceComplete', callback: (event: SwitchRaceCompleteEvent) => void): void;

export declare function on(eventName: 'uniqueIdChange', callback: (event: UniqueIDChangeEvent) => void): void;
export declare function once(eventName: 'uniqueIdChange', callback: (event: UniqueIDChangeEvent) => void): void;

export declare function on(eventName: 'trackedStats', callback: (event: TrackedStatsEvent) => void): void;
export declare function once(eventName: 'trackedStats', callback: (event: TrackedStatsEvent) => void): void;

export declare function on(eventName: 'scriptInit', callback: (event: InitScriptEvent) => void): void;
export declare function once(eventName: 'scriptInit', callback: (event: InitScriptEvent) => void): void;

export declare function on(eventName: 'reset', callback: (event: ResetEvent) => void): void;
export declare function once(eventName: 'reset', callback: (event: ResetEvent) => void): void;

export declare function on(eventName: 'combatState', callback: (event: CombatEvent) => void): void;
export declare function once(eventName: 'combatState', callback: (event: CombatEvent) => void): void;

export declare function on(eventName: 'loadGame', callback: () => void): void;
export declare function once(eventName: 'loadGame', callback: () => void): void;

export declare function on(eventName: 'deathEnd', callback: (event: DeathEvent) => void): void;
export declare function once(eventName: 'deathEnd', callback: (event: DeathEvent) => void): void;

export declare function on(eventName: 'deathStart', callback: (event: DeathEvent) => void): void;
export declare function once(eventName: 'deathStart', callback: (event: DeathEvent) => void): void;

export declare function on(eventName: 'containerChanged', callback: (event: ContainerChangedEvent) => void): void;
export declare function once(eventName: 'containerChanged', callback: (event: ContainerChangedEvent) => void): void;

export declare function on(eventName: 'hit', callback: (event: HitEvent) => void): void;
export declare function once(eventName: 'hit', callback: (event: HitEvent) => void): void;

export declare function on(eventName: 'unequip', callback: (event: EquipEvent) => void): void;
export declare function once(eventName: 'unequip', callback: (event: EquipEvent) => void): void;

export declare function on(eventName: 'equip', callback: (event: EquipEvent) => void): void;
export declare function once(eventName: 'equip', callback: (event: EquipEvent) => void): void;

export declare function on(eventName: 'magicEffectApply', callback: (event: MagicEffectApplyEvent) => void): void;
export declare function once(eventName: 'magicEffectApply', callback: (event: MagicEffectApplyEvent) => void): void;

export declare function on(eventName: 'effectFinish', callback: (event: ActiveEffectApplyRemoveEvent) => void): void;
export declare function once(eventName: 'effectFinish', callback: (event: ActiveEffectApplyRemoveEvent) => void): void;

export declare function on(eventName: 'effectStart', callback: (event: ActiveEffectApplyRemoveEvent) => void): void;
export declare function once(eventName: 'effectStart', callback: (event: ActiveEffectApplyRemoveEvent) => void): void;

export declare function on(eventName: 'menuOpen', callback: (event: MenuOpenEvent) => void): void;
export declare function once(eventName: 'menuOpen', callback: (event: MenuOpenEvent) => void): void;

export declare function on(eventName: 'menuClose', callback: (event: MenuCloseEvent) => void): void;
export declare function once(eventName: 'menuClose', callback: (event: MenuCloseEvent) => void): void;

export declare function on(eventName: 'browserMessage', callback: (event: BrowserMessageEvent) => void): void;
export declare function once(eventName: 'browserMessage', callback: (event: BrowserMessageEvent) => void): void;

export declare function on(eventName: 'consoleMessage', callback: (event: ConsoleMessageEvent) => void): void;
export declare function once(eventName: 'consoleMessage', callback: (event: ConsoleMessageEvent) => void): void;


declare class ConsoleComand {
    longName: string;
    shortName: string;
    numArgs: number;
    execute: (...arguments: unknown[]) => boolean;
}
export declare function findConsoleCommand(cmdName: string): ConsoleComand;

export const enum MotionType {
    Dynamic = 1,
    SphereInertia = 2,
    BoxInertia = 3,
    Keyframed = 4,
    Fixed = 5,
    ThinBoxInertia = 6,
    Character = 7
}

export const enum Menu {
    Barter = 'BarterMenu',
    Book = 'Book Menu',
    Console = 'Console',
    ConsoleNativeUI = 'Console Native UI Menu',
    Container = 'ContainerMenu',
    Crafting = 'Crafting Menu',
    Credits = 'Credits Menu',
    Cursor = 'Cursor Menu',
    Debug = 'Debug Text Menu',
    Dialogue = 'Dialogue Menu',
    Fader = 'Fader Menu',
    Favorites = 'FavoritesMenu',
    Gift = 'GiftMenu',
    HUD = 'HUD Menu',
    Inventory = 'InventoryMenu',
    Journal = 'Journal Menu',
    Kinect = 'Kinect Menu',
    LevelUp = 'LevelUp Menu',
    Loading = 'Loading Menu',
    Main = 'Main Menu',
    Lockpicking = 'Lockpicking Menu',
    Magic = 'MagicMenu',
    Map = 'MapMenu',
    MessageBox = 'MessageBoxMenu',
    Mist = 'Mist Menu',
    OverlayInteraction = 'Overlay Interaction Menu',
    Overlay = 'Overlay Menu',
    Quantity = 'Quantity Menu',
    RaceSex = 'RaceSex Menu',
    Sleep = 'Sleep/Wait Menu',
    Stats = 'StatsMenu',
    TitleSequence = 'TitleSequence Menu',
    Top = 'Top Menu',
    Training = 'Training Menu',
    Tutorial = 'Tutorial Menu',
    Tween = 'TweenMenu'
}

export const enum DxScanCode {
    None,
    Escape,
    N1,
    N2,
    N3,
    N4,
    N5,
    N6,
    N7,
    N8,
    N9,
    N0,
    Minus,
    Equals,
    Backspace,
    Tab,
    Q,
    W,
    E,
    R,
    T,
    Y,
    U,
    I,
    O,
    P,
    LeftBracket,
    RightBracket,
    Enter,
    LeftControl,
    A,
    S,
    D,
    F,
    G,
    H,
    J,
    K,
    L,
    Semicolon,
    Apostrophe,
    Console,
    LeftShift,
    BackSlash,
    Z,
    X,
    C,
    V,
    B,
    N,
    M,
    Comma,
    Period,
    ForwardSlash,
    RightShift,
    NumMult,
    LeftAlt,
    Spacebar,
    CapsLock,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    NumLock,
    ScrollLock,
    Num7,
    Num8,
    Num9,
    NumMinus,
    Num4,
    Num5,
    Num6,
    NumPlus,
    Num1,
    Num2,
    Num3,
    Num0,
    NumDot,
    F11 = 87,
    F12,
    NumEnter = 156,
    RightControl,
    NumSlash = 181,
    SysRqPtrScr = 183,
    RightAlt,
    Pause = 197,
    Home = 199,
    UpArrow,
    PgUp,
    LeftArrow = 203,
    RightArrow = 205,
    End = 207,
    DownArrow,
    PgDown,
    Insert,
    Delete,
    LeftMouseButton = 256,
    RightMouseButton,
    MiddleMouseButton,
    MouseButton3,
    MouseButton4,
    MouseButton5,
    MouseButton6,
    MouseButton7,
    MouseWheelUp,
    MouseWheelDown
}

export const enum FormType {
    ANIO = 83,
    ARMA = 102,
    AcousticSpace = 16,
    Action = 6,
    Activator = 24,
    ActorValueInfo = 95,
    AddonNode = 94,
    Ammo = 42,
    Apparatus = 33,
    Armor = 26,
    ArrowProjectile = 64,
    Art = 125,
    AssociationType = 123,
    BarrierProjectile = 69,
    BeamProjectile = 66,
    BodyPartData = 93,
    Book = 27,
    CameraPath = 97,
    CameraShot = 96,
    Cell = 60,
    Character = 62,
    Class = 10,
    Climate = 55,
    CollisionLayer = 132,
    ColorForm = 133,
    CombatStyle = 80,
    ConeProjectile = 68,
    ConstructibleObject = 49,
    Container = 28,
    DLVW = 117,
    Debris = 88,
    DefaultObject = 107,
    DialogueBranch = 115,
    Door = 29,
    DualCastData = 129,
    EffectSetting = 18,
    EffectShader = 85,
    Enchantment = 21,
    EncounterZone = 103,
    EquipSlot = 120,
    Explosion = 87,
    Eyes = 13,
    Faction = 11,
    FlameProjectile = 67,
    Flora = 39,
    Footstep = 110,
    FootstepSet = 111,
    Furniture = 40,
    GMST = 3,
    Global = 9,
    Grass = 37,
    GrenadeProjectile = 65,
    Group = 2,
    Hazard = 51,
    HeadPart = 12,
    Idle = 78,
    IdleMarker = 47,
    ImageSpace = 89,
    ImageSpaceModifier = 90,
    ImpactData = 100,
    ImpactDataSet = 101,
    Ingredient = 30,
    Key = 45,
    Keyword = 4,
    Land = 72,
    LandTexture = 20,
    LeveledCharacter = 44,
    LeveledItem = 53,
    LeveledSpell = 82,
    Light = 31,
    LightingTemplate = 108,
    List = 91,
    LoadScreen = 81,
    Location = 104,
    LocationRef = 5,
    Material = 126,
    MaterialType = 99,
    MenuIcon = 8,
    Message = 105,
    Misc = 32,
    MissileProjectile = 63,
    MovableStatic = 36,
    MovementType = 127,
    MusicTrack = 116,
    MusicType = 109,
    NAVI = 59,
    NPC = 43,
    NavMesh = 73,
    None = 0,
    Note = 48,
    Outfit = 124,
    PHZD = 70,
    Package = 79,
    Perk = 92,
    Potion = 46,
    Projectile = 50,
    Quest = 77,
    Race = 14,
    Ragdoll = 106,
    Reference = 61,
    ReferenceEffect = 57,
    Region = 58,
    Relationship = 121,
    ReverbParam = 134,
    Scene = 122,
    Script = 19,
    ScrollItem = 23,
    ShaderParticleGeometryData = 56,
    Shout = 119,
    Skill = 17,
    SoulGem = 52,
    Sound = 15,
    SoundCategory = 130,
    SoundDescriptor = 128,
    SoundOutput = 131,
    Spell = 22,
    Static = 34,
    StaticCollection = 35,
    StoryBranchNode = 112,
    StoryEventNode = 114,
    StoryQuestNode = 113,
    TES4 = 1,
    TLOD = 74,
    TOFT = 86,
    TalkingActivator = 25,
    TextureSet = 7,
    Topic = 75,
    TopicInfo = 76,
    Tree = 38,
    VoiceType = 98,
    Water = 84,
    Weapon = 41,
    Weather = 54,
    WordOfPower = 118,
    WorldSpace = 71
}

export const enum WeaponType {
    Fist = 0,
    Sword,
    Dagger,
    WarAxe,
    Mace,
    Greatsword,
    Battleaxe = 6,
    Warhammer = 6,
    Bow,
    Staff,
    Crossbow
}

export const enum EquippedItemType {
    Fist = 0,
    Sword,
    Dagger,
    WarAxe,
    Mace,
    Greatsword,
    Battleaxe = 6,
    Warhammer = 6,
    Bow,
    Staff,
    Spell,
    Shield,
    Torch,
    Crossbow,
}

export const enum SlotMask {
    Head = 0x1,
    Hair = 0x2,
    Body = 0x4,
    Hands = 0x8,
    Forearms = 0x10,
    Amulet = 0x20,
    Ring = 0x40,
    Feet = 0x80,
    Calves = 0x100,
    Shield = 0x200,
    Tail = 0x400,
    LongHair = 0x800,
    Circlet = 0x1000,
    Ears = 0x2000,
    Face = 0x4000,
    Mouth = 0x4000,
    Neck = 0x8000,
    ChestOuter = 0x10000,
    ChestPrimary = 0x10000,
    Back = 0x20000,
    Misc01 = 0x40000,
    PelvisOuter = 0x80000,
    PelvisPrimary = 0x80000,
    DecapitateHead = 0x100000,
    Decapitate = 0x200000,
    PelvisUnder = 0x400000,
    PelvisSecondary = 0x400000,
    LegOuter = 0x800000,
    LegPrimary = 0x800000,
    LegUnder = 0x1000000,
    LegSecondary = 0x1000000,
    FaceAlt = 0x2000000,
    Jewelry = 0x2000000,
    ChestUnder = 0x4000000,
    ChestSecondary = 0x4000000,
    Shoulder = 0x8000000,
    ArmUnder = 0x10000000,
    ArmSecondary = 0x10000000,
    ArmLeft = 0x10000000,
    ArmOuter = 0x20000000,
    ArmPrimary = 0x20000000,
    ArmRight = 0x20000000,
    Misc02 = 0x40000000,
    FX01 = 0x80000000
}

export declare namespace SendAnimationEventHook {
    class Context {
        readonly selfId: number;
        animEventName: string;

        readonly storage: Map<string, unknown>;
    }

    class LeaveContext extends Context {
        readonly animationSucceeded: boolean;
    }

    class Handler {
        enter(ctx: Context): void;
        leave(ctx: LeaveContext): void;
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    class Target {
        add(handler: Handler, minSelfId?: number, maxSelfId?: number, eventPattern?: string): number;
        remove(id: number): void;
    }
}

export declare namespace SendPapyrusEventHook {
    class Context {
        readonly selfId: number;
        readonly papyrusEventName: string;

        readonly storage: Map<string, unknown>;
    }

    class Handler {
        enter(ctx: Context): void;
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    class Target {
        add(handler: Handler, minSelfId?: number, maxSelfId?: number, eventPattern?: string): number;
        remove(id: number): void;
    }
}

export declare class Hooks {
    sendAnimationEvent: SendAnimationEventHook.Target;
    sendPapyrusEvent: SendPapyrusEventHook.Target;
}

export declare let hooks: Hooks;

export declare class HttpResponse {
    body: string;
    status: number;
}
export type HttpHeaders = Record<string, string>;

export declare class HttpClient {
    constructor(url: string);
    get(path: string, options?: { headers?: HttpHeaders }): Promise<HttpResponse>;
    post(path: string, options: { body: string, contentType: string, headers?: HttpHeaders }): Promise<HttpResponse>;
}
