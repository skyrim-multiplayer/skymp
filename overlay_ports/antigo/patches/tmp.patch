diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5365c02..a7a56da 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -11,6 +11,7 @@ project(
 )
 
 set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
+set(CMAKE_CXX_STANDARD 20)
 
 message(STATUS "using real antigo")
 
diff --git a/README.md b/README.md
index 0bfdca2..dfd9023 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,73 @@
-Antigo is a simple easy-to-use C++ library for debugging inspired by Go's context paradigm.
+# Antigo
 
-Documentation is WIP!
+Welcome to Antigo! This is a simple and user-friendly C++ library for debugging, inspired by the context paradigm from Go.
+
+ðŸš§ **Heads up:** Antigo is still in development and might receive a lot of breaking changes. Check out the roadmap below if youâ€™re curious about whatâ€™s coming up!
+
+## Whatâ€™s Cool About Antigo
+
+Antigo makes use of C++ features to automatically link to the previous context and detect in-flight exceptions, giving you some handy functionality:
+
+1. **Automatic Context Passing:** No need to pass context through every function! Just declare it at the start of your function, and itâ€™ll be passed along automatically through thread-local storage. This is super helpful when dealing with stack frames that you donâ€™t control (like other C++ libraries or even different programming languages).
+
+2. **Minimalist Yet Powerful Interface:** Antigo was designed to have little impact on performance. Log strings, numbers, or even lambdas! Everything is kept in leightweight form by default and only evaluated when needed.
+
+3. **Stacktrace-Like Format:** Call `ctx.Resolve()` whenever! It resolves logged values, and presents them in a nice, readable (as much as possible) stacktrace-like format. This also happens automatically if an exception occurs.
+
+4. **Automatic Exception Detection:** Antigo detects exceptions for you! Youâ€™ll know exactly where an exception comes from and also get all the messages logged from lower frames. This mechanism doesn't interfere with normal exception flow, you just get more information using the so-called 'exception witness' mechanism.
+
+5. **Key-Value Storage:** _(Coming soon)_ Store values related to the current execution scope to easily log important info or even pass callbacks.
+
+For more examples of how to use Antigo, check out this README and [unit tests](https://github.com/nic11/antigo/blob/master/unit/src/ContextTest.cpp).
+
+## Roadmap
+
+- [x] Proof of concept
+- [x] Initial release
+- [ ] Some refactoring for better naming and code structure
+- [ ] vcpkg port
+- [ ] More C++ packages
+- [ ] Key-value storage
+- [ ] Optimisation (a lot of dynamic allocations for custom types could be avoided)
+- [ ] Native stacktrace integration
+- [ ] Better exception safety
+- [ ] JSON export: have your error dumps ready for automatic analysis
+- [ ] Coroutines support
+
+If you want to integrate Antigo into your codebase, have a cool idea, or are enthusiastic enough to help with development, please don't hesitate to reach out! You can find contacts on my GitHub profile.
+
+## How To Use
+
+```cpp
+void MyFunction(int a, int b) {
+  ANTIGO_CONTEXT_INIT(ctx);
+  ctx.AddSigned(a);
+  ctx.AddSigned(b);
+
+  if (a == 0 || b == 0) {
+    ctx.AddMessage("one of params is zero");
+    DoSomethingSpecial(a, b);
+    return;
+  }
+
+  ctx.AddMessage("normal case");
+  // ...
+}
+
+void Magic() {
+  // ...
+  try {
+    MyFunction(a, b);
+  } catch (const std::exception& ex) {
+    std::cerr << "Caught exception: " << ex.what() << "\n";
+    while (antigo::HasExceptionWitness()) {
+      auto w = antigo::PopExceptionWitness();
+      std::cerr << "resolved witness: " << w.ToString() << "\n";
+    }
+  }
+}
+```
+
+Now, if an exception occurs inside `MyFunction`, you would see it in the output. This would work even if `Magic` doesn't call `MyFunction` directly.
+
+More detailed documentation is coming soon. In the meantime you can check [unit tests](https://github.com/nic11/antigo/blob/master/unit/src/ContextTest.cpp).
diff --git a/src/antigo/impl/OnstackContextImpl.h b/src/antigo/impl/OnstackContextImpl.h
index 468e7c2..da096cc 100644
--- a/src/antigo/impl/OnstackContextImpl.h
+++ b/src/antigo/impl/OnstackContextImpl.h
@@ -5,7 +5,7 @@
 #include <bitset>
 #include <cassert>
 #include <cstdint>
-#include <fmt/format.h>
+#include <format>
 #include <memory>
 #include <optional>
 #include <variant>
@@ -41,7 +41,7 @@ std::string Strip(const std::string& s) {
 std::string IntRepresentations(uint64_t val) {
   std::bitset<64> binaryVal(val);
 
-  return fmt::format(
+  return std::format(
     "{} | hex: 0x{:x} | bin: {}",
     val,
     val,
@@ -52,7 +52,7 @@ std::string IntRepresentations(uint64_t val) {
 std::string IntRepresentations(int64_t val) {
   std::bitset<64> binaryVal(val);
 
-  return fmt::format(
+  return std::format(
     "{} | hex as uint: 0x{:x} | bin: {}",
     val,
     static_cast<uint64_t>(val),
