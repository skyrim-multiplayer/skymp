diff --git a/include/RE/B/BGSBaseAlias.h b/include/RE/B/BGSBaseAlias.h
index 191d1b51..7fc9248b 100644
--- a/include/RE/B/BGSBaseAlias.h
+++ b/include/RE/B/BGSBaseAlias.h
@@ -65,6 +65,8 @@ namespace RE
 
 		[[nodiscard]] const BSFixedString& GetTypeString() const;
 		[[nodiscard]] VMTypeID             GetVMTypeID() const;
+		[[nodiscard]] bool                 IsEssential() const;
+		[[nodiscard]] bool                 IsProtected() const;
 		[[nodiscard]] bool                 IsQuestObject() const;
 
 		// members
diff --git a/include/RE/B/BGSRefAlias.h b/include/RE/B/BGSRefAlias.h
index ebe561ac..9954a0b7 100644
--- a/include/RE/B/BGSRefAlias.h
+++ b/include/RE/B/BGSRefAlias.h
@@ -146,6 +146,9 @@ namespace RE
 		void                               InitItem(TESForm* a_form) override;  // 02
 		[[nodiscard]] const BSFixedString& QType() const override;              // 03 - { return "Ref"; }
 
+		TESObjectREFR* GetReference() const;
+		Actor*         GetActorReference() const;
+
 		// members
 		GenericFillData fillData;    // 28
 		TESCondition*   conditions;  // 40
diff --git a/include/RE/T/TESQuest.h b/include/RE/T/TESQuest.h
index d7e8704f..ef2261c9 100644
--- a/include/RE/T/TESQuest.h
+++ b/include/RE/T/TESQuest.h
@@ -233,21 +233,23 @@ namespace RE
 		TESCondition*                            QConditions() override;                                         // 3D - { return &objConditions; }
 		BGSStoryManagerTreeVisitor::VisitControl AcceptVisitor(BGSStoryManagerTreeVisitor& a_visitor) override;  // 3E
 
-		bool          EnsureQuestStarted(bool& a_result, bool a_startNow);
-		std::uint16_t GetCurrentStageID() const;
-		bool          IsActive() const;
-		bool          IsCompleted() const;
-		bool          IsEnabled() const;
-		bool          IsRunning() const;
-		bool          IsStarting() const;
-		bool          IsStopped() const;
-		bool          IsStopping() const;
-		void          Reset();
-		void          ResetAndUpdate();
-		void          SetEnabled(bool a_set);
-		bool          Start();
-		bool          StartsEnabled() const;
-		void          Stop();
+		ObjectRefHandle&                         CreateRefHandleByAliasID(ObjectRefHandle& a_handle, std::uint32_t a_aliasID);
+		bool                                     EnsureQuestStarted(bool& a_result, bool a_startNow);
+		std::uint16_t                            GetCurrentStageID() const;
+		[[nodiscard]] constexpr QUEST_DATA::Type GetType() const noexcept { return data.questType.get(); }
+		bool                                     IsActive() const;
+		bool                                     IsCompleted() const;
+		bool                                     IsEnabled() const;
+		bool                                     IsRunning() const;
+		bool                                     IsStarting() const;
+		bool                                     IsStopped() const;
+		bool                                     IsStopping() const;
+		void                                     Reset();
+		void                                     ResetAndUpdate();
+		void                                     SetEnabled(bool a_set);
+		bool                                     Start();
+		bool                                     StartsEnabled() const;
+		void                                     Stop();
 
 		// members
 		BSTArray<BGSQuestInstanceText*>                      instanceData;                             // 038
diff --git a/src/RE/B/BGSBaseAlias.cpp b/src/RE/B/BGSBaseAlias.cpp
index 50d7eb63..675312f7 100644
--- a/src/RE/B/BGSBaseAlias.cpp
+++ b/src/RE/B/BGSBaseAlias.cpp
@@ -22,6 +22,16 @@ namespace RE
 		}
 	}
 
+	bool BGSBaseAlias::IsEssential() const
+	{
+		return flags.all(FLAGS::kEssential);
+	}
+
+	bool BGSBaseAlias::IsProtected() const
+	{
+		return flags.all(FLAGS::kProtected);
+	}
+
 	bool BGSBaseAlias::IsQuestObject() const
 	{
 		return flags.all(FLAGS::kQuestObject);
diff --git a/src/RE/T/TESQuest.cpp b/src/RE/T/TESQuest.cpp
index 397c7db5..e7df5af6 100644
--- a/src/RE/T/TESQuest.cpp
+++ b/src/RE/T/TESQuest.cpp
@@ -10,6 +10,13 @@ namespace RE
 		return *reinterpret_cast<const std::uintptr_t*>(this) != 0;
 	}
 
+	ObjectRefHandle& TESQuest::CreateRefHandleByAliasID(ObjectRefHandle& a_handle, std::uint32_t a_aliasID)
+	{
+		using func_t = decltype(&TESQuest::CreateRefHandleByAliasID);
+		REL::Relocation<func_t> func{ REL::ID(25066) };
+		return func(this, a_handle, a_aliasID);
+	}
+
 	bool TESQuest::EnsureQuestStarted(bool& a_result, bool a_startNow)
 	{
 		using func_t = decltype(&TESQuest::EnsureQuestStarted);
